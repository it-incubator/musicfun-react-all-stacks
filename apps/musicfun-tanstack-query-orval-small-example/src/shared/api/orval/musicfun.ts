/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * MusicFun API
 * API for learning. Create your own analogue of a popular music service, such as SoundCloud or Spotify.

<h4>mp3 examples:</h4> 
üîà: https://musicfun.it-incubator.app/api/samurai-way-soundtrack.mp3   
üîà: https://musicfun.it-incubator.app/api/samurai-way-soundtrack-instrumental.mp3
 * OpenAPI spec version: 1.0
 */
import { customInstance } from './custom-instance'
export interface UserOutputDTO {
  /** Unique identifier of the user */
  id: string
  /** Name of the user */
  name: string
}

/**
 * Type of the image size (e.g., original, thumbnail variants)
 */
export type ImageSizeType = (typeof ImageSizeType)[keyof typeof ImageSizeType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImageSizeType = {
  original: 'original',
  thumbnail: 'thumbnail',
  medium: 'medium',
} as const

export interface ImageDto {
  /** Type of the image size (e.g., original, thumbnail variants) */
  type: ImageSizeType
  /** Image width in pixels */
  width: number
  /** Image height in pixels */
  height: number
  /** Image file size in bytes */
  fileSize: number
  /** Full public URL of the image */
  url: string
}

export interface PlaylistImagesOutputDTO {
  /** Original images and thumbnail previews */
  main?: ImageDto[]
}

export interface GetTagOutput {
  /** Unique identifier of the tag */
  id: string
  /** Original name of the tag */
  name: string
}

/**
 * User reaction: 0 ‚Äì guest or no reaction; 1 ‚Äì like; -1 ‚Äì dislike
 */
export type ReactionValue = (typeof ReactionValue)[keyof typeof ReactionValue]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReactionValue = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_MINUS_1: -1,
} as const

export interface PlaylistAttributesDto {
  /** Title of the playlist */
  title: string
  /**
   * Description of the playlist
   * @nullable
   */
  description: string | null
  /** Date and time when the playlist was added (ISO 8601) */
  addedAt: string
  /** Date and time when the playlist was last updated (ISO 8601) */
  updatedAt: string
  /** Order index of the playlist */
  order: number
  /** User who created the playlist */
  user: UserOutputDTO
  /** Images associated with the playlist */
  images: PlaylistImagesOutputDTO
  /** Tags linked to the playlist */
  tags: GetTagOutput[]
  /** Total number of likes for this playlist */
  likesCount: number
  /** Total number of dislikes for this playlist */
  dislikesCount: number
  /** User reaction: 0 ‚Äì guest or no reaction; 1 ‚Äì like; -1 ‚Äì dislike */
  currentUserReaction: ReactionValue
}

export interface PlaylistListItemJsonApiData {
  /** Unique identifier of the playlist */
  id: string
  /** Resource type (should be "playlists") */
  type: string
  /** Attributes of the playlist resource */
  attributes: PlaylistAttributesDto
}

export interface GetMyPlaylistsOutput {
  /** Array of playlist resource objects owned by the current user */
  data: PlaylistListItemJsonApiData[]
}

export interface CreatePlaylistRequestPayload {
  /**
   * Playlist title (1 to 100 characters)
   * @minLength 1
   * @maxLength 100
   */
  title: string
  /**
   * Playlist description (up to 1000 characters)
   * @maxLength 1000
   * @nullable
   */
  description: string | null
}

export interface PlaylistOutputAttributes {
  /** Title of the playlist */
  title: string
  /**
   * Description of the playlist
   * @nullable
   */
  description: string | null
  /** Date and time when the playlist was added (ISO 8601) */
  addedAt: string
  /** Date and time when the playlist was last updated (ISO 8601) */
  updatedAt: string
  /** Order index of the playlist */
  order: number
  /** User who created the playlist */
  user: UserOutputDTO
  /** Images associated with the playlist */
  images: PlaylistImagesOutputDTO
  /** Tags linked to the playlist */
  tags: GetTagOutput[]
  /** Total number of likes for this playlist */
  likesCount: number
  /** Total number of dislikes for this playlist */
  dislikesCount: number
  /** User reaction: 0 ‚Äì guest or no reaction; 1 ‚Äì like; -1 ‚Äì dislike */
  currentUserReaction: ReactionValue
}

export interface PlaylistOutput {
  /** Unique identifier of the playlist */
  id: string
  /** Resource type (should be "playlists") */
  type: string
  /** Playlist attributes object */
  attributes: PlaylistOutputAttributes
}

export interface GetPlaylistOutput {
  /** JSON:API single-resource response wrapper */
  data: PlaylistOutput
}

export interface UpdatePlaylistRequestPayload {
  /**
   * Playlist title (1 ‚Äì 100 characters)
   * @minLength 1
   * @maxLength 100
   */
  title: string
  /**
   * Playlist description (up to 1000 characters)
   * @maxLength 1000
   * @nullable
   */
  description: string | null
  /**
   * Tag IDs to associate with the playlist (0 ‚Äì 5 items; [] = clear tags)
   * @maxItems 5
   */
  tagIds: string[]
}

export interface ReorderPlaylistsRequestPayload {
  /**
   * ID of the playlist after which the current playlist should be inserted. Send null to place the playlist at the beginning of the list.
   * @nullable
   */
  putAfterItemId: string | null
}

export interface GetImagesOutput {
  /** List of original images and thumbnail versions (e.g., original, 320x180, etc.) */
  main?: ImageDto[]
}

/**
 * Field by which to sort tracks
 */
export type GetTracksRequestPayloadSortBy =
  (typeof GetTracksRequestPayloadSortBy)[keyof typeof GetTracksRequestPayloadSortBy]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetTracksRequestPayloadSortBy = {
  publishedAt: 'publishedAt',
  likesCount: 'likesCount',
} as const

/**
 * Sort direction (ascending or descending)
 */
export type GetTracksRequestPayloadSortDirection =
  (typeof GetTracksRequestPayloadSortDirection)[keyof typeof GetTracksRequestPayloadSortDirection]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetTracksRequestPayloadSortDirection = {
  asc: 'asc',
  desc: 'desc',
} as const

/**
 * Pagination type: "offset" for page-number pagination; "cursor" for keyset/seek-based pagination.
 */
export type GetTracksRequestPayloadPaginationType =
  (typeof GetTracksRequestPayloadPaginationType)[keyof typeof GetTracksRequestPayloadPaginationType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetTracksRequestPayloadPaginationType = {
  offset: 'offset',
  cursor: 'cursor',
} as const

export interface GetTracksRequestPayload {
  /**
   * Page number for pagination (starting from 1)
   * @minimum 1
   */
  pageNumber?: number
  /**
   * Page size for pagination (between 1 and 20)
   * @minimum 1
   * @maximum 20
   */
  pageSize?: number
  /** Search term for filtering playlists by name */
  search?: string
  /** Field by which to sort tracks */
  sortBy?: GetTracksRequestPayloadSortBy
  /** Sort direction (ascending or descending) */
  sortDirection?: GetTracksRequestPayloadSortDirection
  /** Filter by tag IDs (multiple values allowed) */
  tagsIds?: string[]
  /** Filter by artist IDs (multiple values allowed) */
  artistsIds?: string[]
  /** Filter by user ID (track creator's ID) */
  userId?: string
  /** If true, include unpublished tracks (drafts) of current user if userId === currentUserId */
  includeDrafts?: boolean
  /** Pagination type: "offset" for page-number pagination; "cursor" for keyset/seek-based pagination. */
  paginationType?: GetTracksRequestPayloadPaginationType
  /**
   * Base64-encoded cursor for keyset pagination. Used only if paginationType is "cursor".
   * @nullable
   */
  cursor?: string | null
}

export interface JsonApiErrorSource {
  /** e.g. "/data/attributes/field" */
  pointer?: string
  /** e.g. "?queryParam" */
  parameter?: string
}

/**
 * Application-specific error code
 */
export type JsonApiErrorCode = { [key: string]: unknown }

/**
 * Any extra data
 */
export type JsonApiErrorMeta = { [key: string]: unknown }

export interface JsonApiError {
  /** HTTP status code as a string */
  status: string
  /** Application-specific error code */
  code?: JsonApiErrorCode
  /** Short, human-readable summary */
  title?: string
  /** Detailed explanation */
  detail?: string
  /** Pointer to the associated entity in the request */
  source?: JsonApiErrorSource
  /** Any extra data */
  meta?: JsonApiErrorMeta
}

/**
 * e.g. timestamp, path, traceId, etc.
 */
export type JsonApiErrorDocumentMeta = { [key: string]: unknown }

export interface JsonApiErrorDocument {
  /** Array of one or more errors */
  errors: JsonApiError[]
  /** e.g. timestamp, path, traceId, etc. */
  meta?: JsonApiErrorDocumentMeta
}

export interface AttachmentDto {
  /** Unique identifier of the entity */
  id: string
  /** Date and time when the entity was added */
  addedAt: string
  /** Date and time when the entity was last updated */
  updatedAt: string
  /** Version number of the entity (for concurrency control) */
  version: number
  /** Public URL to access the uploaded file */
  url: string
  /** MIME type of the file */
  contentType: string
  /** Original filename uploaded by the user */
  originalName: string
  /** Size of the file in bytes */
  fileSize: number
}

/**
 * 0 ‚Äì –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –∏–ª–∏ –Ω–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª; 1 ‚Äì –ª–∞–π–∫; ‚àí1 ‚Äì –¥–∏–∑–ª–∞–π–∫
 */
export type TrackListItemOutputAttributesCurrentUserReaction =
  (typeof TrackListItemOutputAttributesCurrentUserReaction)[keyof typeof TrackListItemOutputAttributesCurrentUserReaction]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TrackListItemOutputAttributesCurrentUserReaction = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_MINUS_1: -1,
} as const

export interface TrackListItemOutputAttributes {
  title: string
  addedAt: string
  likesCount: number
  attachments: AttachmentDto[]
  images: GetImagesOutput
  user: UserOutputDTO
  /** 0 ‚Äì –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –∏–ª–∏ –Ω–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª; 1 ‚Äì –ª–∞–π–∫; ‚àí1 ‚Äì –¥–∏–∑–ª–∞–π–∫ */
  currentUserReaction: TrackListItemOutputAttributesCurrentUserReaction
  isPublished: boolean
  publishedAt?: string
}

export interface ArtistRelationship {
  id: string
  type: string
}

export interface ArtistsRelationship {
  data: ArtistRelationship[]
}

export interface TrackRelationships {
  artists: ArtistsRelationship
}

export interface TrackListItemOutput {
  id: string
  type: string
  attributes: TrackListItemOutputAttributes
  relationships: TrackRelationships
}

export interface JsonApiMetaWithPagingAndCursor {
  page: number
  pageSize: number
  /**
   * Total count may be absent when using keyset pagination
   * @nullable
   */
  totalCount: number | null
  /**
   * Total number of pages
   * @nullable
   */
  pagesCount: number | null
  /**
   * Cursor for the next page
   * @nullable
   */
  nextCursor: string | null
}

export interface OmitTypeClass {
  /** Name of the artist */
  name: string
}

export interface IncludedArtistOutput {
  id: string
  type: string
  attributes: OmitTypeClass
}

export interface GetTrackListOutput {
  data: TrackListItemOutput[]
  meta: JsonApiMetaWithPagingAndCursor
  included: IncludedArtistOutput[]
}

/**
 * User reaction: 0 ‚Äì guest or no reaction; 1 ‚Äì liked; -1 ‚Äì disliked
 * @nullable
 */
export type PlaylistTrackAttributesCurrentUserReaction =
  | (typeof PlaylistTrackAttributesCurrentUserReaction)[keyof typeof PlaylistTrackAttributesCurrentUserReaction]
  | null

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PlaylistTrackAttributesCurrentUserReaction = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_MINUS_1: -1,
} as const

export interface PlaylistTrackAttributes {
  /** Title of the track */
  title: string
  /** Order index of the track in the playlist */
  order: number
  /** Date and time when the track was added to the playlist (ISO 8601) */
  addedAt: string
  /** Date and time when the track was last updated in the playlist (ISO 8601) */
  updatedAt: string
  /** Attachments related to the track */
  attachments: AttachmentDto[]
  /** Images associated with the track */
  images: GetImagesOutput
  /**
   * User reaction: 0 ‚Äì guest or no reaction; 1 ‚Äì liked; -1 ‚Äì disliked
   * @nullable
   */
  currentUserReaction: PlaylistTrackAttributesCurrentUserReaction
}

export interface GetPlaylistTrackListOutputData {
  id: string
  type: string
  attributes: PlaylistTrackAttributes
  relationships: TrackRelationships
}

export interface JsonApiMeta {
  totalCount: number
}

export interface GetPlaylistTrackListOutput {
  data: GetPlaylistTrackListOutputData[]
  meta: JsonApiMeta
  included: IncludedArtistOutput[]
}

export interface GetArtistOutput {
  /** Unique identifier of the artist */
  id: string
  /** Name of the artist */
  name: string
}

/**
 * User reaction: 0 ‚Äì guest or no reaction; 1 ‚Äì user liked; -1 ‚Äì user disliked
 */
export type TrackDetailsAttributesCurrentUserReaction =
  (typeof TrackDetailsAttributesCurrentUserReaction)[keyof typeof TrackDetailsAttributesCurrentUserReaction]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TrackDetailsAttributesCurrentUserReaction = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_MINUS_1: -1,
} as const

export interface TrackDetailsAttributes {
  /**
   * Track title
   * @maxLength 100
   */
  title: string
  /**
   * Track lyrics text
   * @maxLength 5000
   * @nullable
   */
  lyrics?: string | null
  /**
   * Release date in ISO 8601 format
   * @nullable
   */
  releaseDate?: string | null
  /** Date and time when the track was added (ISO 8601) */
  addedAt: string
  /** Date and time when the track was last updated (ISO 8601) */
  updatedAt: string
  /** Duration of the track in seconds */
  duration: number
  /** Total number of likes for this track */
  likesCount: number
  /**
   * Total number of dislikes for this track
   * @deprecated
   */
  dislikesCount: number
  /** List of attachments related to the track */
  attachments: AttachmentDto[]
  /** Images associated with the track */
  images: GetImagesOutput
  /** Tags associated with the track */
  tags: GetTagOutput[]
  /** Artists associated with the track */
  artists: GetArtistOutput[]
  user: UserOutputDTO
  /** Publication status of the track */
  isPublished: boolean
  /**
   * Publication date in ISO 8601 format
   * @nullable
   */
  publishedAt?: string | null
  /** User reaction: 0 ‚Äì guest or no reaction; 1 ‚Äì user liked; -1 ‚Äì user disliked */
  currentUserReaction: TrackDetailsAttributesCurrentUserReaction
}

export interface TrackDetailsData {
  /** Unique identifier of the track */
  id: string
  /** Resource type (should be "tracks") */
  type: string
  /** Detailed attributes of the track resource */
  attributes: TrackDetailsAttributes
}

export interface GetTrackDetailsOutput {
  /** JSON:API single-track details response wrapper */
  data: TrackDetailsData
}

export type ReactionOutputValue = (typeof ReactionOutputValue)[keyof typeof ReactionOutputValue]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ReactionOutputValue = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_MINUS_1: -1,
} as const

export interface ReactionOutput {
  objectId: string
  value: ReactionOutputValue
  likes: number
  dislikes: number
}

/**
 * Field by which to sort playlists
 */
export type GetPlaylistsRequestPayloadSortBy =
  (typeof GetPlaylistsRequestPayloadSortBy)[keyof typeof GetPlaylistsRequestPayloadSortBy]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetPlaylistsRequestPayloadSortBy = {
  addedAt: 'addedAt',
  likesCount: 'likesCount',
} as const

/**
 * Sort direction (ascending or descending)
 */
export type GetPlaylistsRequestPayloadSortDirection =
  (typeof GetPlaylistsRequestPayloadSortDirection)[keyof typeof GetPlaylistsRequestPayloadSortDirection]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetPlaylistsRequestPayloadSortDirection = {
  asc: 'asc',
  desc: 'desc',
} as const

export interface GetPlaylistsRequestPayload {
  /**
   * Page number for pagination (starting from 1)
   * @minimum 1
   */
  pageNumber?: number
  /**
   * Page size for pagination (between 1 and 20)
   * @minimum 1
   * @maximum 20
   */
  pageSize?: number
  /** Search term for filtering playlists by name */
  search?: string
  /** Field by which to sort playlists */
  sortBy?: GetPlaylistsRequestPayloadSortBy
  /** Sort direction (ascending or descending) */
  sortDirection?: GetPlaylistsRequestPayloadSortDirection
  /** Filter by tag IDs. Multiple values allowed, e.g.: tagsIds=tag1&tagsIds=tag2 */
  tagsIds?: string[]
  /** Filter by user ID (playlist creator‚Äôs ID) */
  userId?: string
  /** Filter by track ID ‚Äì only playlists containing this track will be returned */
  trackId?: string
}

export interface JsonApiMetaWithPaging {
  totalCount: number
  page: number
  pageSize: number
  pagesCount: number
}

export interface GetPlaylistsOutput {
  /** Array of playlist resource objects */
  data: PlaylistListItemJsonApiData[]
  /** Pagination metadata for the playlists list */
  meta: JsonApiMetaWithPaging
}

export interface ReorderTracksRequestPayload {
  /**
   * ID of the track after which the current track should be inserted. Send null to place the track at the beginning of the list.
   * @nullable
   */
  putAfterItemId: string | null
}

export interface UpdateTrackRequestPayload {
  /**
   * Track title (1 to 100 characters)
   * @minLength 1
   * @maxLength 100
   */
  title: string
  /**
   * Track lyrics (up to 5000 characters)
   * @maxLength 5000
   * @nullable
   */
  lyrics: string | null
  /**
   * Release date in ISO 8601 format
   * @nullable
   */
  releaseDate: string | null
  /**
   * Array of tag IDs to associate with the track (up to 5)
   * @maxItems 5
   */
  tagIds: string[]
  /**
   * Array of artist IDs to associate with the track (up to 5)
   * @maxItems 5
   */
  artistsIds: string[]
}

/**
 * User reaction: 0 ‚Äì guest or no reaction; 1 ‚Äì user liked; -1 ‚Äì user disliked
 */
export type TrackOutputAttributesCurrentUserReaction =
  (typeof TrackOutputAttributesCurrentUserReaction)[keyof typeof TrackOutputAttributesCurrentUserReaction]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TrackOutputAttributesCurrentUserReaction = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_MINUS_1: -1,
} as const

export interface TrackOutputAttributes {
  /**
   * Track title
   * @maxLength 100
   */
  title: string
  /**
   * Track lyrics text
   * @maxLength 5000
   * @nullable
   */
  lyrics?: string | null
  /**
   * Release date in ISO 8601 format
   * @nullable
   */
  releaseDate?: string | null
  /** Date and time when the track was added (ISO 8601) */
  addedAt: string
  /** Date and time when the track was last updated (ISO 8601) */
  updatedAt: string
  /** Duration of the track in seconds */
  duration: number
  /** Total number of likes for this track */
  likesCount: number
  /**
   * Total number of dislikes for this track
   * @deprecated
   */
  dislikesCount: number
  /** List of attachments related to the track */
  attachments: AttachmentDto[]
  /** Images associated with the track */
  images: GetImagesOutput
  /** Tags associated with the track */
  tags: GetTagOutput[]
  /** Artists associated with the track */
  artists: GetArtistOutput[]
  user: UserOutputDTO
  /** Publication status of the track */
  isPublished: boolean
  /**
   * Publication date in ISO 8601 format
   * @nullable
   */
  publishedAt?: string | null
  /** User reaction: 0 ‚Äì guest or no reaction; 1 ‚Äì user liked; -1 ‚Äì user disliked */
  currentUserReaction: TrackOutputAttributesCurrentUserReaction
}

export interface TrackOutput {
  /** Unique identifier of the track */
  id: string
  /** Resource type (should be "tracks") */
  type: string
  /** Attributes of the track resource */
  attributes: TrackOutputAttributes
}

export interface GetTrackOutput {
  /** JSON:API single-track response wrapper */
  data: TrackOutput
}

export interface AddTrackToPlaylistRequestPayload {
  /** ID of the track to add to the playlist */
  trackId: string
}

export interface CreateArtistRequestPayload {
  /**
   * Artist name (must be between 2 and 30 characters)
   * @minLength 2
   * @maxLength 30
   */
  name: string
}

export interface LoginRequestPayload {
  /** Authorization code received from OAuth server after redirect */
  code: string
  /** Specify the same redirect URI used in the initial OAuth server request */
  redirectUri: string
  /** Access token lifetime (default "3m"); must be a string like "60s", "3m", "2h", or "1d" */
  accessTokenTTL?: string
  /** Refresh token lifetime: if true, 30 days; if false, 30 minutes. accessTokenTTL must not exceed the refresh token lifetime */
  rememberMe: boolean
}

export interface RefreshOutput {
  refreshToken: string
  accessToken: string
}

export interface BadRequestException {
  [key: string]: unknown
}

export interface UnauthorizedException {
  [key: string]: unknown
}

export interface RefreshRequestPayload {
  refreshToken: string
}

export interface LogoutRequestPayload {
  refreshToken: string
}

export interface GetMeOutput {
  userId: string
  login: string
}

export interface CreateTagRequestPayload {
  /**
   * Tag name (2 to 30 characters)
   * @minLength 2
   * @maxLength 30
   */
  name: string
}

/**
 * –§–∞–π–ª –≤ multipart/form-data
 */
export type BinaryFile = Blob

export type PlaylistsPublicControllerGetPlaylistsParams = {
  /**
   * Page number for pagination (starting from 1)
   * @minimum 1
   */
  pageNumber?: number
  /**
   * Page size for pagination (between 1 and 20)
   * @minimum 1
   * @maximum 20
   */
  pageSize?: number
  /**
   * Search term for filtering playlists by name
   */
  search?: string
  /**
   * Field by which to sort playlists
   */
  sortBy?: PlaylistsPublicControllerGetPlaylistsSortBy
  /**
   * Sort direction (ascending or descending)
   */
  sortDirection?: PlaylistsPublicControllerGetPlaylistsSortDirection
  /**
   * Filter by tag IDs. Multiple values allowed, e.g.: tagsIds=tag1&tagsIds=tag2
   */
  tagsIds?: string[]
  /**
   * Filter by user ID (playlist creator‚Äôs ID)
   */
  userId?: string
  /**
   * Filter by track ID ‚Äì only playlists containing this track will be returned
   */
  trackId?: string
}

export type PlaylistsPublicControllerGetPlaylistsSortBy =
  (typeof PlaylistsPublicControllerGetPlaylistsSortBy)[keyof typeof PlaylistsPublicControllerGetPlaylistsSortBy]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PlaylistsPublicControllerGetPlaylistsSortBy = {
  addedAt: 'addedAt',
  likesCount: 'likesCount',
} as const

export type PlaylistsPublicControllerGetPlaylistsSortDirection =
  (typeof PlaylistsPublicControllerGetPlaylistsSortDirection)[keyof typeof PlaylistsPublicControllerGetPlaylistsSortDirection]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PlaylistsPublicControllerGetPlaylistsSortDirection = {
  asc: 'asc',
  desc: 'desc',
} as const

export type PlaylistsControllerUploadMainImageBody = {
  /**
   * Maximum size 1 MB; minimum height 500px; image must be square
   * @maxLength 1048576
   */
  file: BinaryFile
}

export type TracksPublicControllerGetAllTracksParams = {
  /**
   * Page number for pagination (starting from 1)
   * @minimum 1
   */
  pageNumber?: number
  /**
   * Page size for pagination (between 1 and 20)
   * @minimum 1
   * @maximum 20
   */
  pageSize?: number
  /**
   * Search term for filtering playlists by name
   */
  search?: string
  /**
   * Field by which to sort tracks
   */
  sortBy?: TracksPublicControllerGetAllTracksSortBy
  /**
   * Sort direction (ascending or descending)
   */
  sortDirection?: TracksPublicControllerGetAllTracksSortDirection
  /**
   * Filter by tag IDs (multiple values allowed)
   */
  tagsIds?: string[]
  /**
   * Filter by artist IDs (multiple values allowed)
   */
  artistsIds?: string[]
  /**
   * Filter by user ID (track creator's ID)
   */
  userId?: string
  /**
   * If true, include unpublished tracks (drafts) of current user if userId === currentUserId
   */
  includeDrafts?: boolean
  /**
   * Pagination type: "offset" for page-number pagination; "cursor" for keyset/seek-based pagination.
   */
  paginationType?: TracksPublicControllerGetAllTracksPaginationType
  /**
   * Base64-encoded cursor for keyset pagination. Used only if paginationType is "cursor".
   * @nullable
   */
  cursor?: string | null
}

export type TracksPublicControllerGetAllTracksSortBy =
  (typeof TracksPublicControllerGetAllTracksSortBy)[keyof typeof TracksPublicControllerGetAllTracksSortBy]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TracksPublicControllerGetAllTracksSortBy = {
  publishedAt: 'publishedAt',
  likesCount: 'likesCount',
} as const

export type TracksPublicControllerGetAllTracksSortDirection =
  (typeof TracksPublicControllerGetAllTracksSortDirection)[keyof typeof TracksPublicControllerGetAllTracksSortDirection]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TracksPublicControllerGetAllTracksSortDirection = {
  asc: 'asc',
  desc: 'desc',
} as const

export type TracksPublicControllerGetAllTracksPaginationType =
  (typeof TracksPublicControllerGetAllTracksPaginationType)[keyof typeof TracksPublicControllerGetAllTracksPaginationType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TracksPublicControllerGetAllTracksPaginationType = {
  offset: 'offset',
  cursor: 'cursor',
} as const

export type TracksControllerUploadTrackCoverBody = {
  cover: Blob
}

export type TracksControllerUploadTrackMp3Body = {
  title: string
  file: Blob
}

export type ArtistsControllerSearchArtistParams = {
  search: string
}

export type AuthControllerOauthRedirectParams = {
  /**
 * The callback URL to redirect after grand access,
     https://oauth.apihub.it-incubator.io/realms/apihub/protocol/openid-connect/auth?client_id=musicfun&response_type=code&redirect_uri=http://localhost:3000/oauth2/callback&scope=openid
 */
  callbackUrl: string
}

export type TagsControllerSearchTagsParams = {
  /**
   * Substring to search tags by (using normalized name)
   */
  search: string
}

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * @deprecated
 * @summary Get my playlists
 */
export const playlistsControllerGetMyPlaylists = (options?: SecondParameter<typeof customInstance>) => {
  return customInstance<GetMyPlaylistsOutput>({ url: `/playlists/my`, method: 'GET' }, options)
}

/**
 * @summary Create a new playlist
 */
export const playlistsControllerCreatePlaylist = (
  createPlaylistRequestPayload: CreatePlaylistRequestPayload,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetPlaylistOutput>(
    {
      url: `/playlists`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createPlaylistRequestPayload,
    },
    options,
  )
}

/**
 * Query parameters must conform to the **GetPlaylistsRequestPayload** schema.
 * @summary Retrieve all playlists
 */
export const playlistsPublicControllerGetPlaylists = (
  params?: PlaylistsPublicControllerGetPlaylistsParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetPlaylistsOutput>({ url: `/playlists`, method: 'GET', params }, options)
}

/**
 * @summary Update a playlist
 */
export const playlistsControllerUpdatePlaylist = (
  playlistId: string,
  updatePlaylistRequestPayload: UpdatePlaylistRequestPayload,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/playlists/${playlistId}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: updatePlaylistRequestPayload,
    },
    options,
  )
}

/**
 * @summary Delete a playlist
 */
export const playlistsControllerDeletePlaylist = (
  playlistId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>({ url: `/playlists/${playlistId}`, method: 'DELETE' }, options)
}

/**
 * @summary Get a single playlist by ID
 */
export const playlistsPublicControllerGetPlaylistById = (
  playlistId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetPlaylistOutput>({ url: `/playlists/${playlistId}`, method: 'GET' }, options)
}

/**
 * @summary Reorder playlists
 */
export const playlistsControllerReorderPlaylist = (
  playlistId: string,
  reorderPlaylistsRequestPayload: ReorderPlaylistsRequestPayload,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/playlists/${playlistId}/reorder`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: reorderPlaylistsRequestPayload,
    },
    options,
  )
}

/**
 * Minimum height ‚Äî 500px; image must be square
 * @summary Upload playlist cover
 */
export const playlistsControllerUploadMainImage = (
  playlistId: string,
  playlistsControllerUploadMainImageBody: PlaylistsControllerUploadMainImageBody,
  options?: SecondParameter<typeof customInstance>,
) => {
  const formData = new FormData()
  formData.append(`file`, playlistsControllerUploadMainImageBody.file)

  return customInstance<GetImagesOutput>(
    {
      url: `/playlists/${playlistId}/images/main`,
      method: 'POST',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
    },
    options,
  )
}

/**
 * @summary Delete playlist cover
 */
export const playlistsControllerDeleteTrackCover = (
  playlistId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>({ url: `/playlists/${playlistId}/images/main`, method: 'DELETE' }, options)
}

/**
 * @summary Get list of all tracks in all playlists
 */
export const tracksPublicControllerGetAllTracks = (
  params?: TracksPublicControllerGetAllTracksParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetTrackListOutput>({ url: `/playlists/tracks`, method: 'GET', params }, options)
}

/**
 * @summary Get list of tracks in a playlist
 */
export const tracksPublicControllerGetPlaylistTracks = (
  playlistId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetPlaylistTrackListOutput>({ url: `/playlists/${playlistId}/tracks`, method: 'GET' }, options)
}

/**
 * @summary Get track details by ID
 */
export const tracksPublicControllerGetTrackDetails = (
  trackId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetTrackDetailsOutput>({ url: `/playlists/tracks/${trackId}`, method: 'GET' }, options)
}

/**
 * @summary Update track information
 */
export const tracksControllerUpdateTrack = (
  trackId: string,
  updateTrackRequestPayload: UpdateTrackRequestPayload,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetTrackOutput>(
    {
      url: `/playlists/tracks/${trackId}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: updateTrackRequestPayload,
    },
    options,
  )
}

/**
 * @summary Permanently delete a track
 */
export const tracksControllerDeleteTrackCompletely = (
  trackId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>({ url: `/playlists/tracks/${trackId}`, method: 'DELETE' }, options)
}

/**
 * @summary Like or toggle like on a track
 */
export const tracksPublicControllerLikeTrack = (trackId: string, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<ReactionOutput>({ url: `/playlists/tracks/${trackId}/likes`, method: 'POST' }, options)
}

/**
 * @summary Dislike or toggle dislike on a track
 */
export const tracksPublicControllerDislikeTrack = (
  trackId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ReactionOutput>({ url: `/playlists/tracks/${trackId}/dislikes`, method: 'POST' }, options)
}

/**
 * @summary Remove user reaction from a track
 */
export const tracksPublicControllerRemoveTrackReaction = (
  trackId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ReactionOutput>({ url: `/playlists/tracks/${trackId}/reactions`, method: 'DELETE' }, options)
}

/**
 * @summary Like a playlist
 */
export const playlistsPublicControllerLikePlaylist = (
  playlistId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ReactionOutput>({ url: `/playlists/${playlistId}/likes`, method: 'POST' }, options)
}

/**
 * @summary Dislike a playlist
 */
export const playlistsPublicControllerDislikePlaylist = (
  playlistId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ReactionOutput>({ url: `/playlists/${playlistId}/dislikes`, method: 'POST' }, options)
}

/**
 * @summary Remove user reaction from a playlist
 */
export const playlistsPublicControllerRemovePlaylistReaction = (
  playlistId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ReactionOutput>({ url: `/playlists/${playlistId}/reactions`, method: 'DELETE' }, options)
}

/**
 * @summary Reorder tracks in a playlist
 */
export const tracksControllerReorderTrack = (
  playlistId: string,
  trackId: string,
  reorderTracksRequestPayload: ReorderTracksRequestPayload,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/playlists/${playlistId}/tracks/${trackId}/reorder`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: reorderTracksRequestPayload,
    },
    options,
  )
}

/**
 * @summary Add a track to your playlist
 */
export const tracksControllerAddTrackToPlaylist = (
  playlistId: string,
  addTrackToPlaylistRequestPayload: AddTrackToPlaylistRequestPayload,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/playlists/${playlistId}/relationships/tracks`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: addTrackToPlaylistRequestPayload,
    },
    options,
  )
}

/**
 * @summary Remove a track from your playlist
 */
export const tracksControllerUnbindTrackFromPlaylist = (
  playlistId: string,
  trackId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    { url: `/playlists/${playlistId}/relationships/tracks/${trackId}`, method: 'DELETE' },
    options,
  )
}

/**
 * @summary Publish a track (make it publicly available)
 */
export const tracksControllerPublishTrack = (trackId: string, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<null>({ url: `/playlists/tracks/${trackId}/actions/publish`, method: 'POST' }, options)
}

/**
 * @summary Upload track cover
 */
export const tracksControllerUploadTrackCover = (
  trackId: string,
  tracksControllerUploadTrackCoverBody: TracksControllerUploadTrackCoverBody,
  options?: SecondParameter<typeof customInstance>,
) => {
  const formData = new FormData()
  formData.append(`cover`, tracksControllerUploadTrackCoverBody.cover)

  return customInstance<GetImagesOutput>(
    {
      url: `/playlists/tracks/${trackId}/cover`,
      method: 'POST',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
    },
    options,
  )
}

/**
 * @summary Delete track cover
 */
export const tracksControllerDeleteTrackCover = (trackId: string, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<null>({ url: `/playlists/tracks/${trackId}/cover`, method: 'DELETE' }, options)
}

/**
 * @summary Create a track with MP3 file upload
 */
export const tracksControllerUploadTrackMp3 = (
  tracksControllerUploadTrackMp3Body: TracksControllerUploadTrackMp3Body,
  options?: SecondParameter<typeof customInstance>,
) => {
  const formData = new FormData()
  formData.append(`title`, tracksControllerUploadTrackMp3Body.title)
  formData.append(`file`, tracksControllerUploadTrackMp3Body.file)

  return customInstance<GetTrackOutput>(
    {
      url: `/playlists/tracks/upload`,
      method: 'POST',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
    },
    options,
  )
}

/**
 * @summary Create a new artist
 */
export const artistsControllerCreateArtist = (
  createArtistRequestPayload: CreateArtistRequestPayload,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetArtistOutput>(
    {
      url: `/artists`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createArtistRequestPayload,
    },
    options,
  )
}

/**
 * @summary Search artists by substring
 */
export const artistsControllerSearchArtist = (
  params: ArtistsControllerSearchArtistParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetArtistOutput[]>({ url: `/artists/search`, method: 'GET', params }, options)
}

/**
 * @summary Delete an artist by ID
 */
export const artistsControllerDeleteArtist = (id: string, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<null>({ url: `/artists/${id}`, method: 'DELETE' }, options)
}

/**
 * The callback URL to redirect after granting access, <a target="_blank" href="https://oauth.apihub.it-incubator.io/realms/apihub/protocol/openid-connect/auth?client_id=musicfun&response_type=code&redirect_uri=http://localhost:3000/oauth2/callback&scope=openid">https://oauth.apihub.it-incubator.io/realms/apihub/protocol/openid-connect/auth?client_id=musicfun&response_type=code&redirect_uri=http://localhost:3000/oauth2/callback&scope=openid</a>
 * @summary OAuth redirect
 */
export const authControllerOauthRedirect = (
  params: AuthControllerOauthRedirectParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>({ url: `/auth/oauth-redirect`, method: 'GET', params }, options)
}

/**
 * @summary Log in using the code received after OAuth authorization redirect
 */
export const authControllerLogin = (
  loginRequestPayload: LoginRequestPayload,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<RefreshOutput>(
    { url: `/auth/login`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: loginRequestPayload },
    options,
  )
}

/**
 * @summary Refresh refresh/access token pair
 */
export const authControllerRefresh = (
  refreshRequestPayload: RefreshRequestPayload,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<RefreshOutput>(
    {
      url: `/auth/refresh`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: refreshRequestPayload,
    },
    options,
  )
}

/**
 * @summary Deactivate refresh token
 */
export const authControllerLogout = (
  logoutRequestPayload: LogoutRequestPayload,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/auth/logout`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: logoutRequestPayload,
    },
    options,
  )
}

/**
 * @summary Get current user by access token
 */
export const authControllerGetMe = (options?: SecondParameter<typeof customInstance>) => {
  return customInstance<GetMeOutput>({ url: `/auth/me`, method: 'GET' }, options)
}

/**
 * @summary Create a new tag
 */
export const tagsControllerCreateTag = (
  createTagRequestPayload: CreateTagRequestPayload,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetTagOutput>(
    { url: `/tags`, method: 'POST', headers: { 'Content-Type': 'application/json' }, data: createTagRequestPayload },
    options,
  )
}

/**
 * @summary Search tags by substring
 */
export const tagsControllerSearchTags = (
  params: TagsControllerSearchTagsParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetTagOutput[]>({ url: `/tags/search`, method: 'GET', params }, options)
}

/**
 * @summary Delete a tag by ID
 */
export const tagsControllerDeleteTag = (id: string, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<null>({ url: `/tags/${id}`, method: 'DELETE' }, options)
}

export type PlaylistsControllerGetMyPlaylistsResult = NonNullable<
  Awaited<ReturnType<typeof playlistsControllerGetMyPlaylists>>
>
export type PlaylistsControllerCreatePlaylistResult = NonNullable<
  Awaited<ReturnType<typeof playlistsControllerCreatePlaylist>>
>
export type PlaylistsPublicControllerGetPlaylistsResult = NonNullable<
  Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylists>>
>
export type PlaylistsControllerUpdatePlaylistResult = NonNullable<
  Awaited<ReturnType<typeof playlistsControllerUpdatePlaylist>>
>
export type PlaylistsControllerDeletePlaylistResult = NonNullable<
  Awaited<ReturnType<typeof playlistsControllerDeletePlaylist>>
>
export type PlaylistsPublicControllerGetPlaylistByIdResult = NonNullable<
  Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylistById>>
>
export type PlaylistsControllerReorderPlaylistResult = NonNullable<
  Awaited<ReturnType<typeof playlistsControllerReorderPlaylist>>
>
export type PlaylistsControllerUploadMainImageResult = NonNullable<
  Awaited<ReturnType<typeof playlistsControllerUploadMainImage>>
>
export type PlaylistsControllerDeleteTrackCoverResult = NonNullable<
  Awaited<ReturnType<typeof playlistsControllerDeleteTrackCover>>
>
export type TracksPublicControllerGetAllTracksResult = NonNullable<
  Awaited<ReturnType<typeof tracksPublicControllerGetAllTracks>>
>
export type TracksPublicControllerGetPlaylistTracksResult = NonNullable<
  Awaited<ReturnType<typeof tracksPublicControllerGetPlaylistTracks>>
>
export type TracksPublicControllerGetTrackDetailsResult = NonNullable<
  Awaited<ReturnType<typeof tracksPublicControllerGetTrackDetails>>
>
export type TracksControllerUpdateTrackResult = NonNullable<Awaited<ReturnType<typeof tracksControllerUpdateTrack>>>
export type TracksControllerDeleteTrackCompletelyResult = NonNullable<
  Awaited<ReturnType<typeof tracksControllerDeleteTrackCompletely>>
>
export type TracksPublicControllerLikeTrackResult = NonNullable<
  Awaited<ReturnType<typeof tracksPublicControllerLikeTrack>>
>
export type TracksPublicControllerDislikeTrackResult = NonNullable<
  Awaited<ReturnType<typeof tracksPublicControllerDislikeTrack>>
>
export type TracksPublicControllerRemoveTrackReactionResult = NonNullable<
  Awaited<ReturnType<typeof tracksPublicControllerRemoveTrackReaction>>
>
export type PlaylistsPublicControllerLikePlaylistResult = NonNullable<
  Awaited<ReturnType<typeof playlistsPublicControllerLikePlaylist>>
>
export type PlaylistsPublicControllerDislikePlaylistResult = NonNullable<
  Awaited<ReturnType<typeof playlistsPublicControllerDislikePlaylist>>
>
export type PlaylistsPublicControllerRemovePlaylistReactionResult = NonNullable<
  Awaited<ReturnType<typeof playlistsPublicControllerRemovePlaylistReaction>>
>
export type TracksControllerReorderTrackResult = NonNullable<Awaited<ReturnType<typeof tracksControllerReorderTrack>>>
export type TracksControllerAddTrackToPlaylistResult = NonNullable<
  Awaited<ReturnType<typeof tracksControllerAddTrackToPlaylist>>
>
export type TracksControllerUnbindTrackFromPlaylistResult = NonNullable<
  Awaited<ReturnType<typeof tracksControllerUnbindTrackFromPlaylist>>
>
export type TracksControllerPublishTrackResult = NonNullable<Awaited<ReturnType<typeof tracksControllerPublishTrack>>>
export type TracksControllerUploadTrackCoverResult = NonNullable<
  Awaited<ReturnType<typeof tracksControllerUploadTrackCover>>
>
export type TracksControllerDeleteTrackCoverResult = NonNullable<
  Awaited<ReturnType<typeof tracksControllerDeleteTrackCover>>
>
export type TracksControllerUploadTrackMp3Result = NonNullable<
  Awaited<ReturnType<typeof tracksControllerUploadTrackMp3>>
>
export type ArtistsControllerCreateArtistResult = NonNullable<Awaited<ReturnType<typeof artistsControllerCreateArtist>>>
export type ArtistsControllerSearchArtistResult = NonNullable<Awaited<ReturnType<typeof artistsControllerSearchArtist>>>
export type ArtistsControllerDeleteArtistResult = NonNullable<Awaited<ReturnType<typeof artistsControllerDeleteArtist>>>
export type AuthControllerOauthRedirectResult = NonNullable<Awaited<ReturnType<typeof authControllerOauthRedirect>>>
export type AuthControllerLoginResult = NonNullable<Awaited<ReturnType<typeof authControllerLogin>>>
export type AuthControllerRefreshResult = NonNullable<Awaited<ReturnType<typeof authControllerRefresh>>>
export type AuthControllerLogoutResult = NonNullable<Awaited<ReturnType<typeof authControllerLogout>>>
export type AuthControllerGetMeResult = NonNullable<Awaited<ReturnType<typeof authControllerGetMe>>>
export type TagsControllerCreateTagResult = NonNullable<Awaited<ReturnType<typeof tagsControllerCreateTag>>>
export type TagsControllerSearchTagsResult = NonNullable<Awaited<ReturnType<typeof tagsControllerSearchTags>>>
export type TagsControllerDeleteTagResult = NonNullable<Awaited<ReturnType<typeof tagsControllerDeleteTag>>>
