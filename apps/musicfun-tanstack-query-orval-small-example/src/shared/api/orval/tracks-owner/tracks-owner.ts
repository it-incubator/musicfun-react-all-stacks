/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * MusicFun API
 * API for learning. Create your own analogue of a popular music service, such as SoundCloud or Spotify.

<h4>mp3 examples:</h4> 
üîà: https://musicfun.it-incubator.app/api/samurai-way-soundtrack.mp3   
üîà: https://musicfun.it-incubator.app/api/samurai-way-soundtrack-instrumental.mp3
 * OpenAPI spec version: 1.0
 */
import { useMutation } from '@tanstack/react-query'
import type { MutationFunction, QueryClient, UseMutationOptions, UseMutationResult } from '@tanstack/react-query'

import type {
  AddTrackToPlaylistRequestPayload,
  GetImagesOutput,
  GetTrackOutput,
  ReorderTracksRequestPayload,
  TracksControllerUploadTrackCoverBody,
  TracksControllerUploadTrackMp3Body,
  UpdateTrackRequestPayload,
} from '../musicfun.schemas'

import { customInstance } from '.././custom-instance'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * @summary Update track information
 */
export const tracksControllerUpdateTrack = (
  trackId: string,
  updateTrackRequestPayload: UpdateTrackRequestPayload,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<GetTrackOutput>(
    {
      url: `/playlists/tracks/${trackId}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: updateTrackRequestPayload,
    },
    options,
  )
}

export const getTracksControllerUpdateTrackMutationOptions = <
  TError = null | null | null,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tracksControllerUpdateTrack>>,
    TError,
    { trackId: string; data: UpdateTrackRequestPayload },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof tracksControllerUpdateTrack>>,
  TError,
  { trackId: string; data: UpdateTrackRequestPayload },
  TContext
> => {
  const mutationKey = ['tracksControllerUpdateTrack']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tracksControllerUpdateTrack>>,
    { trackId: string; data: UpdateTrackRequestPayload }
  > = (props) => {
    const { trackId, data } = props ?? {}

    return tracksControllerUpdateTrack(trackId, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type TracksControllerUpdateTrackMutationResult = NonNullable<
  Awaited<ReturnType<typeof tracksControllerUpdateTrack>>
>
export type TracksControllerUpdateTrackMutationBody = UpdateTrackRequestPayload
export type TracksControllerUpdateTrackMutationError = null | null | null

/**
 * @summary Update track information
 */
export const useTracksControllerUpdateTrack = <TError = null | null | null, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof tracksControllerUpdateTrack>>,
      TError,
      { trackId: string; data: UpdateTrackRequestPayload },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof tracksControllerUpdateTrack>>,
  TError,
  { trackId: string; data: UpdateTrackRequestPayload },
  TContext
> => {
  const mutationOptions = getTracksControllerUpdateTrackMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Permanently delete a track
 */
export const tracksControllerDeleteTrackCompletely = (
  trackId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>({ url: `/playlists/tracks/${trackId}`, method: 'DELETE' }, options)
}

export const getTracksControllerDeleteTrackCompletelyMutationOptions = <
  TError = null | null,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tracksControllerDeleteTrackCompletely>>,
    TError,
    { trackId: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof tracksControllerDeleteTrackCompletely>>,
  TError,
  { trackId: string },
  TContext
> => {
  const mutationKey = ['tracksControllerDeleteTrackCompletely']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tracksControllerDeleteTrackCompletely>>,
    { trackId: string }
  > = (props) => {
    const { trackId } = props ?? {}

    return tracksControllerDeleteTrackCompletely(trackId, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type TracksControllerDeleteTrackCompletelyMutationResult = NonNullable<
  Awaited<ReturnType<typeof tracksControllerDeleteTrackCompletely>>
>

export type TracksControllerDeleteTrackCompletelyMutationError = null | null

/**
 * @summary Permanently delete a track
 */
export const useTracksControllerDeleteTrackCompletely = <TError = null | null, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof tracksControllerDeleteTrackCompletely>>,
      TError,
      { trackId: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof tracksControllerDeleteTrackCompletely>>,
  TError,
  { trackId: string },
  TContext
> => {
  const mutationOptions = getTracksControllerDeleteTrackCompletelyMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Reorder tracks in a playlist
 */
export const tracksControllerReorderTrack = (
  playlistId: string,
  trackId: string,
  reorderTracksRequestPayload: ReorderTracksRequestPayload,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/playlists/${playlistId}/tracks/${trackId}/reorder`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: reorderTracksRequestPayload,
    },
    options,
  )
}

export const getTracksControllerReorderTrackMutationOptions = <
  TError = null | null | null,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tracksControllerReorderTrack>>,
    TError,
    { playlistId: string; trackId: string; data: ReorderTracksRequestPayload },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof tracksControllerReorderTrack>>,
  TError,
  { playlistId: string; trackId: string; data: ReorderTracksRequestPayload },
  TContext
> => {
  const mutationKey = ['tracksControllerReorderTrack']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tracksControllerReorderTrack>>,
    { playlistId: string; trackId: string; data: ReorderTracksRequestPayload }
  > = (props) => {
    const { playlistId, trackId, data } = props ?? {}

    return tracksControllerReorderTrack(playlistId, trackId, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type TracksControllerReorderTrackMutationResult = NonNullable<
  Awaited<ReturnType<typeof tracksControllerReorderTrack>>
>
export type TracksControllerReorderTrackMutationBody = ReorderTracksRequestPayload
export type TracksControllerReorderTrackMutationError = null | null | null

/**
 * @summary Reorder tracks in a playlist
 */
export const useTracksControllerReorderTrack = <TError = null | null | null, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof tracksControllerReorderTrack>>,
      TError,
      { playlistId: string; trackId: string; data: ReorderTracksRequestPayload },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof tracksControllerReorderTrack>>,
  TError,
  { playlistId: string; trackId: string; data: ReorderTracksRequestPayload },
  TContext
> => {
  const mutationOptions = getTracksControllerReorderTrackMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Add a track to your playlist
 */
export const tracksControllerAddTrackToPlaylist = (
  playlistId: string,
  addTrackToPlaylistRequestPayload: AddTrackToPlaylistRequestPayload,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>(
    {
      url: `/playlists/${playlistId}/relationships/tracks`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: addTrackToPlaylistRequestPayload,
      signal,
    },
    options,
  )
}

export const getTracksControllerAddTrackToPlaylistMutationOptions = <
  TError = null | null,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tracksControllerAddTrackToPlaylist>>,
    TError,
    { playlistId: string; data: AddTrackToPlaylistRequestPayload },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof tracksControllerAddTrackToPlaylist>>,
  TError,
  { playlistId: string; data: AddTrackToPlaylistRequestPayload },
  TContext
> => {
  const mutationKey = ['tracksControllerAddTrackToPlaylist']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tracksControllerAddTrackToPlaylist>>,
    { playlistId: string; data: AddTrackToPlaylistRequestPayload }
  > = (props) => {
    const { playlistId, data } = props ?? {}

    return tracksControllerAddTrackToPlaylist(playlistId, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type TracksControllerAddTrackToPlaylistMutationResult = NonNullable<
  Awaited<ReturnType<typeof tracksControllerAddTrackToPlaylist>>
>
export type TracksControllerAddTrackToPlaylistMutationBody = AddTrackToPlaylistRequestPayload
export type TracksControllerAddTrackToPlaylistMutationError = null | null

/**
 * @summary Add a track to your playlist
 */
export const useTracksControllerAddTrackToPlaylist = <TError = null | null, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof tracksControllerAddTrackToPlaylist>>,
      TError,
      { playlistId: string; data: AddTrackToPlaylistRequestPayload },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof tracksControllerAddTrackToPlaylist>>,
  TError,
  { playlistId: string; data: AddTrackToPlaylistRequestPayload },
  TContext
> => {
  const mutationOptions = getTracksControllerAddTrackToPlaylistMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Remove a track from your playlist
 */
export const tracksControllerUnbindTrackFromPlaylist = (
  playlistId: string,
  trackId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    { url: `/playlists/${playlistId}/relationships/tracks/${trackId}`, method: 'DELETE' },
    options,
  )
}

export const getTracksControllerUnbindTrackFromPlaylistMutationOptions = <
  TError = null | null,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tracksControllerUnbindTrackFromPlaylist>>,
    TError,
    { playlistId: string; trackId: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof tracksControllerUnbindTrackFromPlaylist>>,
  TError,
  { playlistId: string; trackId: string },
  TContext
> => {
  const mutationKey = ['tracksControllerUnbindTrackFromPlaylist']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tracksControllerUnbindTrackFromPlaylist>>,
    { playlistId: string; trackId: string }
  > = (props) => {
    const { playlistId, trackId } = props ?? {}

    return tracksControllerUnbindTrackFromPlaylist(playlistId, trackId, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type TracksControllerUnbindTrackFromPlaylistMutationResult = NonNullable<
  Awaited<ReturnType<typeof tracksControllerUnbindTrackFromPlaylist>>
>

export type TracksControllerUnbindTrackFromPlaylistMutationError = null | null

/**
 * @summary Remove a track from your playlist
 */
export const useTracksControllerUnbindTrackFromPlaylist = <TError = null | null, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof tracksControllerUnbindTrackFromPlaylist>>,
      TError,
      { playlistId: string; trackId: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof tracksControllerUnbindTrackFromPlaylist>>,
  TError,
  { playlistId: string; trackId: string },
  TContext
> => {
  const mutationOptions = getTracksControllerUnbindTrackFromPlaylistMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Publish a track (make it publicly available)
 */
export const tracksControllerPublishTrack = (
  trackId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<null>({ url: `/playlists/tracks/${trackId}/actions/publish`, method: 'POST', signal }, options)
}

export const getTracksControllerPublishTrackMutationOptions = <
  TError = null | null | null,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tracksControllerPublishTrack>>,
    TError,
    { trackId: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof tracksControllerPublishTrack>>,
  TError,
  { trackId: string },
  TContext
> => {
  const mutationKey = ['tracksControllerPublishTrack']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof tracksControllerPublishTrack>>, { trackId: string }> = (
    props,
  ) => {
    const { trackId } = props ?? {}

    return tracksControllerPublishTrack(trackId, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type TracksControllerPublishTrackMutationResult = NonNullable<
  Awaited<ReturnType<typeof tracksControllerPublishTrack>>
>

export type TracksControllerPublishTrackMutationError = null | null | null

/**
 * @summary Publish a track (make it publicly available)
 */
export const useTracksControllerPublishTrack = <TError = null | null | null, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof tracksControllerPublishTrack>>,
      TError,
      { trackId: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof tracksControllerPublishTrack>>,
  TError,
  { trackId: string },
  TContext
> => {
  const mutationOptions = getTracksControllerPublishTrackMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Upload track cover
 */
export const tracksControllerUploadTrackCover = (
  trackId: string,
  tracksControllerUploadTrackCoverBody: TracksControllerUploadTrackCoverBody,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  const formData = new FormData()
  formData.append(`cover`, tracksControllerUploadTrackCoverBody.cover)

  return customInstance<GetImagesOutput>(
    {
      url: `/playlists/tracks/${trackId}/cover`,
      method: 'POST',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
      signal,
    },
    options,
  )
}

export const getTracksControllerUploadTrackCoverMutationOptions = <
  TError = null | null | null,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tracksControllerUploadTrackCover>>,
    TError,
    { trackId: string; data: TracksControllerUploadTrackCoverBody },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof tracksControllerUploadTrackCover>>,
  TError,
  { trackId: string; data: TracksControllerUploadTrackCoverBody },
  TContext
> => {
  const mutationKey = ['tracksControllerUploadTrackCover']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tracksControllerUploadTrackCover>>,
    { trackId: string; data: TracksControllerUploadTrackCoverBody }
  > = (props) => {
    const { trackId, data } = props ?? {}

    return tracksControllerUploadTrackCover(trackId, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type TracksControllerUploadTrackCoverMutationResult = NonNullable<
  Awaited<ReturnType<typeof tracksControllerUploadTrackCover>>
>
export type TracksControllerUploadTrackCoverMutationBody = TracksControllerUploadTrackCoverBody
export type TracksControllerUploadTrackCoverMutationError = null | null | null

/**
 * @summary Upload track cover
 */
export const useTracksControllerUploadTrackCover = <TError = null | null | null, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof tracksControllerUploadTrackCover>>,
      TError,
      { trackId: string; data: TracksControllerUploadTrackCoverBody },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof tracksControllerUploadTrackCover>>,
  TError,
  { trackId: string; data: TracksControllerUploadTrackCoverBody },
  TContext
> => {
  const mutationOptions = getTracksControllerUploadTrackCoverMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Delete track cover
 */
export const tracksControllerDeleteTrackCover = (trackId: string, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<null>({ url: `/playlists/tracks/${trackId}/cover`, method: 'DELETE' }, options)
}

export const getTracksControllerDeleteTrackCoverMutationOptions = <TError = null | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tracksControllerDeleteTrackCover>>,
    TError,
    { trackId: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof tracksControllerDeleteTrackCover>>,
  TError,
  { trackId: string },
  TContext
> => {
  const mutationKey = ['tracksControllerDeleteTrackCover']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tracksControllerDeleteTrackCover>>,
    { trackId: string }
  > = (props) => {
    const { trackId } = props ?? {}

    return tracksControllerDeleteTrackCover(trackId, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type TracksControllerDeleteTrackCoverMutationResult = NonNullable<
  Awaited<ReturnType<typeof tracksControllerDeleteTrackCover>>
>

export type TracksControllerDeleteTrackCoverMutationError = null | null

/**
 * @summary Delete track cover
 */
export const useTracksControllerDeleteTrackCover = <TError = null | null, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof tracksControllerDeleteTrackCover>>,
      TError,
      { trackId: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof tracksControllerDeleteTrackCover>>,
  TError,
  { trackId: string },
  TContext
> => {
  const mutationOptions = getTracksControllerDeleteTrackCoverMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Create a track with MP3 file upload
 */
export const tracksControllerUploadTrackMp3 = (
  tracksControllerUploadTrackMp3Body: TracksControllerUploadTrackMp3Body,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  const formData = new FormData()
  formData.append(`title`, tracksControllerUploadTrackMp3Body.title)
  formData.append(`file`, tracksControllerUploadTrackMp3Body.file)

  return customInstance<GetTrackOutput>(
    {
      url: `/playlists/tracks/upload`,
      method: 'POST',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
      signal,
    },
    options,
  )
}

export const getTracksControllerUploadTrackMp3MutationOptions = <TError = null | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tracksControllerUploadTrackMp3>>,
    TError,
    { data: TracksControllerUploadTrackMp3Body },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof tracksControllerUploadTrackMp3>>,
  TError,
  { data: TracksControllerUploadTrackMp3Body },
  TContext
> => {
  const mutationKey = ['tracksControllerUploadTrackMp3']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tracksControllerUploadTrackMp3>>,
    { data: TracksControllerUploadTrackMp3Body }
  > = (props) => {
    const { data } = props ?? {}

    return tracksControllerUploadTrackMp3(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type TracksControllerUploadTrackMp3MutationResult = NonNullable<
  Awaited<ReturnType<typeof tracksControllerUploadTrackMp3>>
>
export type TracksControllerUploadTrackMp3MutationBody = TracksControllerUploadTrackMp3Body
export type TracksControllerUploadTrackMp3MutationError = null | null

/**
 * @summary Create a track with MP3 file upload
 */
export const useTracksControllerUploadTrackMp3 = <TError = null | null, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof tracksControllerUploadTrackMp3>>,
      TError,
      { data: TracksControllerUploadTrackMp3Body },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof tracksControllerUploadTrackMp3>>,
  TError,
  { data: TracksControllerUploadTrackMp3Body },
  TContext
> => {
  const mutationOptions = getTracksControllerUploadTrackMp3MutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
