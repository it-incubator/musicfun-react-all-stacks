/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * MusicFun API
 * API for learning. Create your own analogue of a popular music service, such as SoundCloud or Spotify.

<h4>mp3 examples:</h4> 
üîà: https://musicfun.it-incubator.app/api/samurai-way-soundtrack.mp3   
üîà: https://musicfun.it-incubator.app/api/samurai-way-soundtrack-instrumental.mp3
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type {
  CreatePlaylistRequestPayload,
  GetImagesOutput,
  GetMyPlaylistsOutput,
  GetPlaylistOutput,
  PlaylistsControllerUploadMainImageBody,
  ReorderPlaylistsRequestPayload,
  UpdatePlaylistRequestPayload,
} from '../musicfun.schemas'

import { customInstance } from '.././custom-instance'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * @deprecated
 * @summary Get my playlists
 */
export const playlistsControllerGetMyPlaylists = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetMyPlaylistsOutput>({ url: `/playlists/my`, method: 'GET', signal }, options)
}

export const getPlaylistsControllerGetMyPlaylistsQueryKey = () => {
  return [`/playlists/my`] as const
}

export const getPlaylistsControllerGetMyPlaylistsQueryOptions = <
  TData = Awaited<ReturnType<typeof playlistsControllerGetMyPlaylists>>,
  TError = null,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof playlistsControllerGetMyPlaylists>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getPlaylistsControllerGetMyPlaylistsQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof playlistsControllerGetMyPlaylists>>> = ({ signal }) =>
    playlistsControllerGetMyPlaylists(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof playlistsControllerGetMyPlaylists>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PlaylistsControllerGetMyPlaylistsQueryResult = NonNullable<
  Awaited<ReturnType<typeof playlistsControllerGetMyPlaylists>>
>
export type PlaylistsControllerGetMyPlaylistsQueryError = null

export function usePlaylistsControllerGetMyPlaylists<
  TData = Awaited<ReturnType<typeof playlistsControllerGetMyPlaylists>>,
  TError = null,
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof playlistsControllerGetMyPlaylists>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof playlistsControllerGetMyPlaylists>>,
          TError,
          Awaited<ReturnType<typeof playlistsControllerGetMyPlaylists>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePlaylistsControllerGetMyPlaylists<
  TData = Awaited<ReturnType<typeof playlistsControllerGetMyPlaylists>>,
  TError = null,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof playlistsControllerGetMyPlaylists>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof playlistsControllerGetMyPlaylists>>,
          TError,
          Awaited<ReturnType<typeof playlistsControllerGetMyPlaylists>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePlaylistsControllerGetMyPlaylists<
  TData = Awaited<ReturnType<typeof playlistsControllerGetMyPlaylists>>,
  TError = null,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof playlistsControllerGetMyPlaylists>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @deprecated
 * @summary Get my playlists
 */

export function usePlaylistsControllerGetMyPlaylists<
  TData = Awaited<ReturnType<typeof playlistsControllerGetMyPlaylists>>,
  TError = null,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof playlistsControllerGetMyPlaylists>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getPlaylistsControllerGetMyPlaylistsQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Create a new playlist
 */
export const playlistsControllerCreatePlaylist = (
  createPlaylistRequestPayload: CreatePlaylistRequestPayload,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetPlaylistOutput>(
    {
      url: `/playlists`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createPlaylistRequestPayload,
      signal,
    },
    options,
  )
}

export const getPlaylistsControllerCreatePlaylistMutationOptions = <TError = null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof playlistsControllerCreatePlaylist>>,
    TError,
    { data: CreatePlaylistRequestPayload },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof playlistsControllerCreatePlaylist>>,
  TError,
  { data: CreatePlaylistRequestPayload },
  TContext
> => {
  const mutationKey = ['playlistsControllerCreatePlaylist']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof playlistsControllerCreatePlaylist>>,
    { data: CreatePlaylistRequestPayload }
  > = (props) => {
    const { data } = props ?? {}

    return playlistsControllerCreatePlaylist(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PlaylistsControllerCreatePlaylistMutationResult = NonNullable<
  Awaited<ReturnType<typeof playlistsControllerCreatePlaylist>>
>
export type PlaylistsControllerCreatePlaylistMutationBody = CreatePlaylistRequestPayload
export type PlaylistsControllerCreatePlaylistMutationError = null

/**
 * @summary Create a new playlist
 */
export const usePlaylistsControllerCreatePlaylist = <TError = null, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof playlistsControllerCreatePlaylist>>,
      TError,
      { data: CreatePlaylistRequestPayload },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof playlistsControllerCreatePlaylist>>,
  TError,
  { data: CreatePlaylistRequestPayload },
  TContext
> => {
  const mutationOptions = getPlaylistsControllerCreatePlaylistMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Update a playlist
 */
export const playlistsControllerUpdatePlaylist = (
  playlistId: string,
  updatePlaylistRequestPayload: UpdatePlaylistRequestPayload,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/playlists/${playlistId}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: updatePlaylistRequestPayload,
    },
    options,
  )
}

export const getPlaylistsControllerUpdatePlaylistMutationOptions = <
  TError = null | null,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof playlistsControllerUpdatePlaylist>>,
    TError,
    { playlistId: string; data: UpdatePlaylistRequestPayload },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof playlistsControllerUpdatePlaylist>>,
  TError,
  { playlistId: string; data: UpdatePlaylistRequestPayload },
  TContext
> => {
  const mutationKey = ['playlistsControllerUpdatePlaylist']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof playlistsControllerUpdatePlaylist>>,
    { playlistId: string; data: UpdatePlaylistRequestPayload }
  > = (props) => {
    const { playlistId, data } = props ?? {}

    return playlistsControllerUpdatePlaylist(playlistId, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PlaylistsControllerUpdatePlaylistMutationResult = NonNullable<
  Awaited<ReturnType<typeof playlistsControllerUpdatePlaylist>>
>
export type PlaylistsControllerUpdatePlaylistMutationBody = UpdatePlaylistRequestPayload
export type PlaylistsControllerUpdatePlaylistMutationError = null | null

/**
 * @summary Update a playlist
 */
export const usePlaylistsControllerUpdatePlaylist = <TError = null | null, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof playlistsControllerUpdatePlaylist>>,
      TError,
      { playlistId: string; data: UpdatePlaylistRequestPayload },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof playlistsControllerUpdatePlaylist>>,
  TError,
  { playlistId: string; data: UpdatePlaylistRequestPayload },
  TContext
> => {
  const mutationOptions = getPlaylistsControllerUpdatePlaylistMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Delete a playlist
 */
export const playlistsControllerDeletePlaylist = (
  playlistId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>({ url: `/playlists/${playlistId}`, method: 'DELETE' }, options)
}

export const getPlaylistsControllerDeletePlaylistMutationOptions = <
  TError = null | null,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof playlistsControllerDeletePlaylist>>,
    TError,
    { playlistId: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof playlistsControllerDeletePlaylist>>,
  TError,
  { playlistId: string },
  TContext
> => {
  const mutationKey = ['playlistsControllerDeletePlaylist']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof playlistsControllerDeletePlaylist>>,
    { playlistId: string }
  > = (props) => {
    const { playlistId } = props ?? {}

    return playlistsControllerDeletePlaylist(playlistId, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PlaylistsControllerDeletePlaylistMutationResult = NonNullable<
  Awaited<ReturnType<typeof playlistsControllerDeletePlaylist>>
>

export type PlaylistsControllerDeletePlaylistMutationError = null | null

/**
 * @summary Delete a playlist
 */
export const usePlaylistsControllerDeletePlaylist = <TError = null | null, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof playlistsControllerDeletePlaylist>>,
      TError,
      { playlistId: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof playlistsControllerDeletePlaylist>>,
  TError,
  { playlistId: string },
  TContext
> => {
  const mutationOptions = getPlaylistsControllerDeletePlaylistMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Reorder playlists
 */
export const playlistsControllerReorderPlaylist = (
  playlistId: string,
  reorderPlaylistsRequestPayload: ReorderPlaylistsRequestPayload,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>(
    {
      url: `/playlists/${playlistId}/reorder`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: reorderPlaylistsRequestPayload,
    },
    options,
  )
}

export const getPlaylistsControllerReorderPlaylistMutationOptions = <TError = null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof playlistsControllerReorderPlaylist>>,
    TError,
    { playlistId: string; data: ReorderPlaylistsRequestPayload },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof playlistsControllerReorderPlaylist>>,
  TError,
  { playlistId: string; data: ReorderPlaylistsRequestPayload },
  TContext
> => {
  const mutationKey = ['playlistsControllerReorderPlaylist']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof playlistsControllerReorderPlaylist>>,
    { playlistId: string; data: ReorderPlaylistsRequestPayload }
  > = (props) => {
    const { playlistId, data } = props ?? {}

    return playlistsControllerReorderPlaylist(playlistId, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PlaylistsControllerReorderPlaylistMutationResult = NonNullable<
  Awaited<ReturnType<typeof playlistsControllerReorderPlaylist>>
>
export type PlaylistsControllerReorderPlaylistMutationBody = ReorderPlaylistsRequestPayload
export type PlaylistsControllerReorderPlaylistMutationError = null

/**
 * @summary Reorder playlists
 */
export const usePlaylistsControllerReorderPlaylist = <TError = null, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof playlistsControllerReorderPlaylist>>,
      TError,
      { playlistId: string; data: ReorderPlaylistsRequestPayload },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof playlistsControllerReorderPlaylist>>,
  TError,
  { playlistId: string; data: ReorderPlaylistsRequestPayload },
  TContext
> => {
  const mutationOptions = getPlaylistsControllerReorderPlaylistMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Minimum height ‚Äî 500px; image must be square
 * @summary Upload playlist cover
 */
export const playlistsControllerUploadMainImage = (
  playlistId: string,
  playlistsControllerUploadMainImageBody: PlaylistsControllerUploadMainImageBody,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  const formData = new FormData()
  formData.append(`file`, playlistsControllerUploadMainImageBody.file)

  return customInstance<GetImagesOutput>(
    {
      url: `/playlists/${playlistId}/images/main`,
      method: 'POST',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
      signal,
    },
    options,
  )
}

export const getPlaylistsControllerUploadMainImageMutationOptions = <
  TError = null | null,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof playlistsControllerUploadMainImage>>,
    TError,
    { playlistId: string; data: PlaylistsControllerUploadMainImageBody },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof playlistsControllerUploadMainImage>>,
  TError,
  { playlistId: string; data: PlaylistsControllerUploadMainImageBody },
  TContext
> => {
  const mutationKey = ['playlistsControllerUploadMainImage']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof playlistsControllerUploadMainImage>>,
    { playlistId: string; data: PlaylistsControllerUploadMainImageBody }
  > = (props) => {
    const { playlistId, data } = props ?? {}

    return playlistsControllerUploadMainImage(playlistId, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PlaylistsControllerUploadMainImageMutationResult = NonNullable<
  Awaited<ReturnType<typeof playlistsControllerUploadMainImage>>
>
export type PlaylistsControllerUploadMainImageMutationBody = PlaylistsControllerUploadMainImageBody
export type PlaylistsControllerUploadMainImageMutationError = null | null

/**
 * @summary Upload playlist cover
 */
export const usePlaylistsControllerUploadMainImage = <TError = null | null, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof playlistsControllerUploadMainImage>>,
      TError,
      { playlistId: string; data: PlaylistsControllerUploadMainImageBody },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof playlistsControllerUploadMainImage>>,
  TError,
  { playlistId: string; data: PlaylistsControllerUploadMainImageBody },
  TContext
> => {
  const mutationOptions = getPlaylistsControllerUploadMainImageMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Delete playlist cover
 */
export const playlistsControllerDeleteTrackCover = (
  playlistId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<null>({ url: `/playlists/${playlistId}/images/main`, method: 'DELETE' }, options)
}

export const getPlaylistsControllerDeleteTrackCoverMutationOptions = <
  TError = null | null,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof playlistsControllerDeleteTrackCover>>,
    TError,
    { playlistId: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof playlistsControllerDeleteTrackCover>>,
  TError,
  { playlistId: string },
  TContext
> => {
  const mutationKey = ['playlistsControllerDeleteTrackCover']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof playlistsControllerDeleteTrackCover>>,
    { playlistId: string }
  > = (props) => {
    const { playlistId } = props ?? {}

    return playlistsControllerDeleteTrackCover(playlistId, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PlaylistsControllerDeleteTrackCoverMutationResult = NonNullable<
  Awaited<ReturnType<typeof playlistsControllerDeleteTrackCover>>
>

export type PlaylistsControllerDeleteTrackCoverMutationError = null | null

/**
 * @summary Delete playlist cover
 */
export const usePlaylistsControllerDeleteTrackCover = <TError = null | null, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof playlistsControllerDeleteTrackCover>>,
      TError,
      { playlistId: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof playlistsControllerDeleteTrackCover>>,
  TError,
  { playlistId: string },
  TContext
> => {
  const mutationOptions = getPlaylistsControllerDeleteTrackCoverMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
