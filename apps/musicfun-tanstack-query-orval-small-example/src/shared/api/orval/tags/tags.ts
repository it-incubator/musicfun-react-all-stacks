/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * MusicFun API
 * API for learning. Create your own analogue of a popular music service, such as SoundCloud or Spotify.

<h4>mp3 examples:</h4> 
üîà: https://musicfun.it-incubator.app/api/samurai-way-soundtrack.mp3   
üîà: https://musicfun.it-incubator.app/api/samurai-way-soundtrack-instrumental.mp3
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type { CreateTagRequestPayload, GetTagOutput, TagsControllerSearchTagsParams } from '../musicfun.schemas'

import { customInstance } from '.././custom-instance'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * @summary Create a new tag
 */
export const tagsControllerCreateTag = (
  createTagRequestPayload: CreateTagRequestPayload,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetTagOutput>(
    {
      url: `/tags`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createTagRequestPayload,
      signal,
    },
    options,
  )
}

export const getTagsControllerCreateTagMutationOptions = <
  TError = null | null | null | null,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tagsControllerCreateTag>>,
    TError,
    { data: CreateTagRequestPayload },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof tagsControllerCreateTag>>,
  TError,
  { data: CreateTagRequestPayload },
  TContext
> => {
  const mutationKey = ['tagsControllerCreateTag']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tagsControllerCreateTag>>,
    { data: CreateTagRequestPayload }
  > = (props) => {
    const { data } = props ?? {}

    return tagsControllerCreateTag(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type TagsControllerCreateTagMutationResult = NonNullable<Awaited<ReturnType<typeof tagsControllerCreateTag>>>
export type TagsControllerCreateTagMutationBody = CreateTagRequestPayload
export type TagsControllerCreateTagMutationError = null | null | null | null

/**
 * @summary Create a new tag
 */
export const useTagsControllerCreateTag = <TError = null | null | null | null, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof tagsControllerCreateTag>>,
      TError,
      { data: CreateTagRequestPayload },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof tagsControllerCreateTag>>,
  TError,
  { data: CreateTagRequestPayload },
  TContext
> => {
  const mutationOptions = getTagsControllerCreateTagMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Search tags by substring
 */
export const tagsControllerSearchTags = (
  params: TagsControllerSearchTagsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetTagOutput[]>({ url: `/tags/search`, method: 'GET', params, signal }, options)
}

export const getTagsControllerSearchTagsQueryKey = (params?: TagsControllerSearchTagsParams) => {
  return [`/tags/search`, ...(params ? [params] : [])] as const
}

export const getTagsControllerSearchTagsQueryOptions = <
  TData = Awaited<ReturnType<typeof tagsControllerSearchTags>>,
  TError = null,
>(
  params: TagsControllerSearchTagsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof tagsControllerSearchTags>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTagsControllerSearchTagsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof tagsControllerSearchTags>>> = ({ signal }) =>
    tagsControllerSearchTags(params, requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof tagsControllerSearchTags>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TagsControllerSearchTagsQueryResult = NonNullable<Awaited<ReturnType<typeof tagsControllerSearchTags>>>
export type TagsControllerSearchTagsQueryError = null

export function useTagsControllerSearchTags<
  TData = Awaited<ReturnType<typeof tagsControllerSearchTags>>,
  TError = null,
>(
  params: TagsControllerSearchTagsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof tagsControllerSearchTags>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tagsControllerSearchTags>>,
          TError,
          Awaited<ReturnType<typeof tagsControllerSearchTags>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTagsControllerSearchTags<
  TData = Awaited<ReturnType<typeof tagsControllerSearchTags>>,
  TError = null,
>(
  params: TagsControllerSearchTagsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof tagsControllerSearchTags>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tagsControllerSearchTags>>,
          TError,
          Awaited<ReturnType<typeof tagsControllerSearchTags>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useTagsControllerSearchTags<
  TData = Awaited<ReturnType<typeof tagsControllerSearchTags>>,
  TError = null,
>(
  params: TagsControllerSearchTagsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof tagsControllerSearchTags>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Search tags by substring
 */

export function useTagsControllerSearchTags<
  TData = Awaited<ReturnType<typeof tagsControllerSearchTags>>,
  TError = null,
>(
  params: TagsControllerSearchTagsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof tagsControllerSearchTags>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getTagsControllerSearchTagsQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Delete a tag by ID
 */
export const tagsControllerDeleteTag = (id: string, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<null>({ url: `/tags/${id}`, method: 'DELETE' }, options)
}

export const getTagsControllerDeleteTagMutationOptions = <TError = null | null | null, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof tagsControllerDeleteTag>>, TError, { id: string }, TContext>
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<Awaited<ReturnType<typeof tagsControllerDeleteTag>>, TError, { id: string }, TContext> => {
  const mutationKey = ['tagsControllerDeleteTag']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof tagsControllerDeleteTag>>, { id: string }> = (props) => {
    const { id } = props ?? {}

    return tagsControllerDeleteTag(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type TagsControllerDeleteTagMutationResult = NonNullable<Awaited<ReturnType<typeof tagsControllerDeleteTag>>>

export type TagsControllerDeleteTagMutationError = null | null | null

/**
 * @summary Delete a tag by ID
 */
export const useTagsControllerDeleteTag = <TError = null | null | null, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof tagsControllerDeleteTag>>, TError, { id: string }, TContext>
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof tagsControllerDeleteTag>>, TError, { id: string }, TContext> => {
  const mutationOptions = getTagsControllerDeleteTagMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
