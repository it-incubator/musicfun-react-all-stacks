/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * MusicFun API
 * API for learning. Create your own analogue of a popular music service, such as SoundCloud or Spotify.

<h4>mp3 examples:</h4> 
üîà: https://musicfun.it-incubator.app/api/samurai-way-soundtrack.mp3   
üîà: https://musicfun.it-incubator.app/api/samurai-way-soundtrack-instrumental.mp3
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'

import type {
  GetPlaylistOutput,
  GetPlaylistsOutput,
  PlaylistsPublicControllerGetPlaylistsParams,
  ReactionOutput,
} from '../musicfun.schemas'

import { customInstance } from '.././custom-instance'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Query parameters must conform to the **GetPlaylistsRequestPayload** schema.
 * @summary Retrieve all playlists
 */
export const playlistsPublicControllerGetPlaylists = (
  params?: PlaylistsPublicControllerGetPlaylistsParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetPlaylistsOutput>({ url: `/playlists`, method: 'GET', params, signal }, options)
}

export const getPlaylistsPublicControllerGetPlaylistsQueryKey = (
  params?: PlaylistsPublicControllerGetPlaylistsParams,
) => {
  return [`/playlists`, ...(params ? [params] : [])] as const
}

export const getPlaylistsPublicControllerGetPlaylistsQueryOptions = <
  TData = Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylists>>,
  TError = unknown,
>(
  params?: PlaylistsPublicControllerGetPlaylistsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylists>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getPlaylistsPublicControllerGetPlaylistsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylists>>> = ({ signal }) =>
    playlistsPublicControllerGetPlaylists(params, requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylists>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PlaylistsPublicControllerGetPlaylistsQueryResult = NonNullable<
  Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylists>>
>
export type PlaylistsPublicControllerGetPlaylistsQueryError = unknown

export function usePlaylistsPublicControllerGetPlaylists<
  TData = Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylists>>,
  TError = unknown,
>(
  params: undefined | PlaylistsPublicControllerGetPlaylistsParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylists>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylists>>,
          TError,
          Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylists>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePlaylistsPublicControllerGetPlaylists<
  TData = Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylists>>,
  TError = unknown,
>(
  params?: PlaylistsPublicControllerGetPlaylistsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylists>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylists>>,
          TError,
          Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylists>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePlaylistsPublicControllerGetPlaylists<
  TData = Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylists>>,
  TError = unknown,
>(
  params?: PlaylistsPublicControllerGetPlaylistsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylists>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Retrieve all playlists
 */

export function usePlaylistsPublicControllerGetPlaylists<
  TData = Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylists>>,
  TError = unknown,
>(
  params?: PlaylistsPublicControllerGetPlaylistsParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylists>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getPlaylistsPublicControllerGetPlaylistsQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get a single playlist by ID
 */
export const playlistsPublicControllerGetPlaylistById = (
  playlistId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetPlaylistOutput>({ url: `/playlists/${playlistId}`, method: 'GET', signal }, options)
}

export const getPlaylistsPublicControllerGetPlaylistByIdQueryKey = (playlistId?: string) => {
  return [`/playlists/${playlistId}`] as const
}

export const getPlaylistsPublicControllerGetPlaylistByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylistById>>,
  TError = null,
>(
  playlistId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylistById>>, TError, TData>
    >
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getPlaylistsPublicControllerGetPlaylistByIdQueryKey(playlistId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylistById>>> = ({ signal }) =>
    playlistsPublicControllerGetPlaylistById(playlistId, requestOptions, signal)

  return { queryKey, queryFn, enabled: !!playlistId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylistById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PlaylistsPublicControllerGetPlaylistByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylistById>>
>
export type PlaylistsPublicControllerGetPlaylistByIdQueryError = null

export function usePlaylistsPublicControllerGetPlaylistById<
  TData = Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylistById>>,
  TError = null,
>(
  playlistId: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylistById>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylistById>>,
          TError,
          Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylistById>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePlaylistsPublicControllerGetPlaylistById<
  TData = Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylistById>>,
  TError = null,
>(
  playlistId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylistById>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylistById>>,
          TError,
          Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylistById>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePlaylistsPublicControllerGetPlaylistById<
  TData = Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylistById>>,
  TError = null,
>(
  playlistId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylistById>>, TError, TData>
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get a single playlist by ID
 */

export function usePlaylistsPublicControllerGetPlaylistById<
  TData = Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylistById>>,
  TError = null,
>(
  playlistId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof playlistsPublicControllerGetPlaylistById>>, TError, TData>
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getPlaylistsPublicControllerGetPlaylistByIdQueryOptions(playlistId, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Like a playlist
 */
export const playlistsPublicControllerLikePlaylist = (
  playlistId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ReactionOutput>({ url: `/playlists/${playlistId}/likes`, method: 'POST', signal }, options)
}

export const getPlaylistsPublicControllerLikePlaylistMutationOptions = <
  TError = null | null | null,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof playlistsPublicControllerLikePlaylist>>,
    TError,
    { playlistId: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof playlistsPublicControllerLikePlaylist>>,
  TError,
  { playlistId: string },
  TContext
> => {
  const mutationKey = ['playlistsPublicControllerLikePlaylist']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof playlistsPublicControllerLikePlaylist>>,
    { playlistId: string }
  > = (props) => {
    const { playlistId } = props ?? {}

    return playlistsPublicControllerLikePlaylist(playlistId, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PlaylistsPublicControllerLikePlaylistMutationResult = NonNullable<
  Awaited<ReturnType<typeof playlistsPublicControllerLikePlaylist>>
>

export type PlaylistsPublicControllerLikePlaylistMutationError = null | null | null

/**
 * @summary Like a playlist
 */
export const usePlaylistsPublicControllerLikePlaylist = <TError = null | null | null, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof playlistsPublicControllerLikePlaylist>>,
      TError,
      { playlistId: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof playlistsPublicControllerLikePlaylist>>,
  TError,
  { playlistId: string },
  TContext
> => {
  const mutationOptions = getPlaylistsPublicControllerLikePlaylistMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Dislike a playlist
 */
export const playlistsPublicControllerDislikePlaylist = (
  playlistId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ReactionOutput>({ url: `/playlists/${playlistId}/dislikes`, method: 'POST', signal }, options)
}

export const getPlaylistsPublicControllerDislikePlaylistMutationOptions = <
  TError = null | null | null,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof playlistsPublicControllerDislikePlaylist>>,
    TError,
    { playlistId: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof playlistsPublicControllerDislikePlaylist>>,
  TError,
  { playlistId: string },
  TContext
> => {
  const mutationKey = ['playlistsPublicControllerDislikePlaylist']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof playlistsPublicControllerDislikePlaylist>>,
    { playlistId: string }
  > = (props) => {
    const { playlistId } = props ?? {}

    return playlistsPublicControllerDislikePlaylist(playlistId, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PlaylistsPublicControllerDislikePlaylistMutationResult = NonNullable<
  Awaited<ReturnType<typeof playlistsPublicControllerDislikePlaylist>>
>

export type PlaylistsPublicControllerDislikePlaylistMutationError = null | null | null

/**
 * @summary Dislike a playlist
 */
export const usePlaylistsPublicControllerDislikePlaylist = <TError = null | null | null, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof playlistsPublicControllerDislikePlaylist>>,
      TError,
      { playlistId: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof playlistsPublicControllerDislikePlaylist>>,
  TError,
  { playlistId: string },
  TContext
> => {
  const mutationOptions = getPlaylistsPublicControllerDislikePlaylistMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Remove user reaction from a playlist
 */
export const playlistsPublicControllerRemovePlaylistReaction = (
  playlistId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ReactionOutput>({ url: `/playlists/${playlistId}/reactions`, method: 'DELETE' }, options)
}

export const getPlaylistsPublicControllerRemovePlaylistReactionMutationOptions = <
  TError = null | null,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof playlistsPublicControllerRemovePlaylistReaction>>,
    TError,
    { playlistId: string },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof playlistsPublicControllerRemovePlaylistReaction>>,
  TError,
  { playlistId: string },
  TContext
> => {
  const mutationKey = ['playlistsPublicControllerRemovePlaylistReaction']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof playlistsPublicControllerRemovePlaylistReaction>>,
    { playlistId: string }
  > = (props) => {
    const { playlistId } = props ?? {}

    return playlistsPublicControllerRemovePlaylistReaction(playlistId, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PlaylistsPublicControllerRemovePlaylistReactionMutationResult = NonNullable<
  Awaited<ReturnType<typeof playlistsPublicControllerRemovePlaylistReaction>>
>

export type PlaylistsPublicControllerRemovePlaylistReactionMutationError = null | null

/**
 * @summary Remove user reaction from a playlist
 */
export const usePlaylistsPublicControllerRemovePlaylistReaction = <TError = null | null, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof playlistsPublicControllerRemovePlaylistReaction>>,
      TError,
      { playlistId: string },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof playlistsPublicControllerRemovePlaylistReaction>>,
  TError,
  { playlistId: string },
  TContext
> => {
  const mutationOptions = getPlaylistsPublicControllerRemovePlaylistReactionMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
