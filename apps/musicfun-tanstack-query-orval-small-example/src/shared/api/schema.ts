/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/playlists/my': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Получить список моих плейлистов
     * @deprecated
     */
    get: operations['PlaylistsController_getMyPlaylists']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/playlists': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Получить список всех плейлистов */
    get: operations['PlaylistsPublicController_getPlaylists']
    put?: never
    /** Создать новый плейлист */
    post: operations['PlaylistsController_createPlaylist']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/playlists/{playlistId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Получить один плейлист по ID */
    get: operations['PlaylistsPublicController_getPlaylistById']
    /** Обновить плейлист */
    put: operations['PlaylistsController_updatePlaylist']
    post?: never
    /** Удалить плейлист */
    delete: operations['PlaylistsController_deletePlaylist']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/playlists/{playlistId}/reorder': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Переупорядочить плейлисты */
    put: operations['PlaylistsController_reorderPlaylist']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/playlists/{playlistId}/images/main': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Загрузить обложку для плейлиста
     * @description Минимальная высота — 500px, квадратное изображение
     */
    post: operations['PlaylistsController_uploadMainImage']
    /** Удалить обложку плейлиста */
    delete: operations['PlaylistsController_deleteTrackCover']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/playlists/tracks': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Получить список всех треков во всех плейлистах */
    get: operations['TracksPublicController_getAllTracks']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/playlists/{playlistId}/tracks': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Получить список треков внутри плейлиста */
    get: operations['TracksPublicController_getPlaylistTracks']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/playlists/tracks/{trackId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Получить детали трека по ID */
    get: operations['TracksPublicController_getTrackDetails']
    /** Обновить информацию о треке */
    put: operations['TracksController_updateTrack']
    post?: never
    /** Полностью удалить трек */
    delete: operations['TracksController_deleteTrackCompletely']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/playlists/tracks/{trackId}/likes': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Поставить лайк треку или снять его (toggle) */
    post: operations['TracksPublicController_likeTrack']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/playlists/tracks/{trackId}/dislikes': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Поставить дизлайк треку или снять его (toggle) */
    post: operations['TracksPublicController_dislikeTrack']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/playlists/tracks/{trackId}/reactions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** Удалить реакцию пользователя на трек */
    delete: operations['TracksPublicController_removeTrackReaction']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/playlists/{playlistId}/likes': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Поставить лайк плейлисту */
    post: operations['PlaylistsPublicController_likePlaylist']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/playlists/{playlistId}/dislikes': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Поставить дизлайк плейлисту */
    post: operations['PlaylistsPublicController_dislikePlaylist']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/playlists/{playlistId}/reactions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** Удалить реакцию пользователя на плейлист */
    delete: operations['PlaylistsPublicController_removePlaylistReaction']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/playlists/{playlistId}/tracks/{trackId}/reorder': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Изменить порядок треков в плейлисте */
    put: operations['TracksController_reorderTrack']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/playlists/{playlistId}/relationships/tracks': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Добавить трек в свой плейлист */
    post: operations['TracksController_addTrackToPlaylist']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/playlists/{playlistId}/relationships/tracks/{trackId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** Удалить трек из своего плейлиста */
    delete: operations['TracksController_unbindTrackFromPlaylist']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/playlists/tracks/{trackId}/actions/publish': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Публикация трека (сделать доступным для всех) */
    post: operations['TracksController_publishTrack']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/playlists/tracks/{trackId}/cover': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Загрузить обложку трека */
    post: operations['TracksController_uploadTrackCover']
    /** Удалить обложку трека */
    delete: operations['TracksController_deleteTrackCover']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/playlists/tracks/upload': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Создать трек с загрузкой mp3 файла */
    post: operations['TracksController_uploadTrackMp3']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/artists': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Создать нового исполнителя */
    post: operations['ArtistsController_createArtist']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/artists/search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Поиск исполнителей по подстроке */
    get: operations['ArtistsController_searchArtist']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/artists/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** Удалить исполнителя по ID */
    delete: operations['ArtistsController_deleteArtist']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/oauth-redirect': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * OAuth редирект
     * @description The callback URL to redirect after grand access,
     *          <a target="_blank" href="https://oauth.apihub.it-incubator.io/realms/apihub/protocol/openid-connect/auth?client_id=spotifun&response_type=code&redirect_uri=http://localhost:3000/oauth2/callback&scope=openid">https://oauth.apihub.it-incubator.io/realms/apihub/protocol/openid-connect/auth?client_id=spotifun&response_type=code&redirect_uri=http://localhost:3000/oauth2/callback&scope=openid</a>
     */
    get: operations['AuthController_OauthRedirect']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/login': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Залогиниться с помощью кода, полученного после редиректа после авторизации через OAuth */
    post: operations['AuthController_login']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/refresh': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Обновить пару refresh/access токенов */
    post: operations['AuthController_refresh']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/logout': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Деактивировать refresh-token */
    post: operations['AuthController_logout']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/auth/me': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Получить текущего пользователя по access токену */
    get: operations['AuthController_getMe']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/tags': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Создать новый тег */
    post: operations['TagsController_createTag']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/tags/search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Поиск тегов по подстроке */
    get: operations['TagsController_searchTags']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/tags/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** Удалить тег по ID */
    delete: operations['TagsController_deleteTag']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    UserOutputDTO: {
      id: string
      name: string
    }
    ImageDto: {
      /** @enum {string} */
      type: 'original' | 'thumbnail' | 'medium'
      width: number
      height: number
      fileSize: number
      url: string
    }
    PlaylistImagesOutputDTO: {
      /** @description Оригинальное изображение и превьюшки */
      main?: components['schemas']['ImageDto'][]
    }
    /**
     * @description 0 (не залогинен или не реагировал), 1 — лайк, -1 — дизлайк
     * @enum {number}
     */
    ReactionValue: 0 | 1 | -1
    PlaylistAttributesDto: {
      title: string
      description: string | null
      addedAt: string
      updatedAt: string
      order: number
      user: components['schemas']['UserOutputDTO']
      images: components['schemas']['PlaylistImagesOutputDTO']
      tags: string[]
      likesCount: number
      dislikesCount: number
      /** @description 0 (не залогинен или не реагировал), 1 — лайк, -1 — дизлайк */
      currentUserReaction: components['schemas']['ReactionValue']
    }
    PlaylistListItemJsonApiData: {
      id: string
      /** @example playlists */
      type: string
      attributes: components['schemas']['PlaylistAttributesDto']
    }
    GetMyPlaylistsOutput: {
      data: components['schemas']['PlaylistListItemJsonApiData'][]
    }
    CreatePlaylistRequestPayload: {
      title: string
      description?: string
    }
    PlaylistOutputAttributes: {
      title: string
      description: string | null
      addedAt: string
      updatedAt: string
      order: number
      user: components['schemas']['UserOutputDTO']
      images: components['schemas']['PlaylistImagesOutputDTO']
      tags: string[]
      likesCount: number
      dislikesCount: number
      /** @description 0 (не залогинен или не реагировал), 1 — лайк, -1 — дизлайк */
      currentUserReaction: components['schemas']['ReactionValue']
    }
    PlaylistOutput: {
      id: string
      /** @example playlists */
      type: string
      attributes: components['schemas']['PlaylistOutputAttributes']
    }
    GetPlaylistOutput: {
      data: components['schemas']['PlaylistOutput']
    }
    UpdatePlaylistRequestPayload: {
      title: string
      /** @example Cool playlist */
      description?: string | null
      tagIds?: string[]
    }
    ReorderPlaylistsRequestPayload: {
      /**
       * Format: uuid
       * @description ID плейлиста, после которого нужно вставить текущий. null - разместить плейлист в начало списка.
       * @example a1b2c3d4-e5f6-7890-abcd-1234567890ef
       */
      putAfterItemId?: string | null
    }
    GetImagesOutput: {
      /** @description Должен содержать оригинальный размер изображения и миниатюры, например: original, 320x180 и т.п. */
      main?: components['schemas']['ImageDto'][]
    }
    GetTracksRequestPayload: {
      /**
       * @description Номер страницы для пагинации (начиная с 1)
       * @default 1
       */
      pageNumber: number
      /**
       * @description Размер страницы для пагинации (от 1 до 20)
       * @default 10
       */
      pageSize: number
      /** @description Строка для поиска по названию плейлиста */
      search?: string
      /**
       * @description Поле, по которому сортируются треки
       * @default publishedAt
       * @enum {string}
       */
      sortBy: 'publishedAt' | 'likesCount'
      /**
       * @description Направление сортировки (по возрастанию или убыванию)
       * @default desc
       * @enum {string}
       */
      sortDirection: 'asc' | 'desc'
      /** @description Фильтрация по ID тегов (можно передавать несколько) */
      tagsIds?: string[]
      /** @description Фильтрация по ID артистов (можно передавать несколько) */
      artistsIds?: string[]
      /** @description Фильтрация по ID пользователя (создателя трека) */
      userId?: string
      /** @description Если true — включать в выдачу также ваши неопубликованные треки (drafts) */
      includeOwnUnpublished?: boolean
      /**
       * @description Тип пагинации: `offset` — по номеру страницы; `cursor` — keyset/seek.
       * @default offset
       * @enum {string}
       */
      paginationType: 'offset' | 'cursor'
      /** @description Base64-закодированный курсор для keyset-пагинации. Используется только если paginationType=cursor. */
      cursor?: string
    }
    AttachmentDto: {
      id: string
      /** Format: date-time */
      addedAt: string
      /** Format: date-time */
      updatedAt: string
      version: number
      /**
       * @description Public URL to access the uploaded file
       * @example https://cdn.example.com/uploads/track123/cover.jpg
       */
      url: string
      /**
       * @description MIME type of the file
       * @example image/jpeg
       */
      contentType: string
      /**
       * @description Original filename uploaded by the user
       * @example cover.jpg
       */
      originalName: string
      /**
       * @description Size of the file in bytes
       * @example 34872
       */
      fileSize: number
    }
    TrackListItemOutputAttributes: {
      title: string
      addedAt: string
      attachments: components['schemas']['AttachmentDto'][]
      images: components['schemas']['GetImagesOutput']
      user: components['schemas']['UserOutputDTO']
      /**
       * @description 0 – не залогинен или не реагировал; 1 – лайк; −1 – дизлайк
       * @enum {number}
       */
      currentUserReaction: 0 | 1 | -1
      isPublished: boolean
      publishedAt?: string
    }
    ArtistRelationship: {
      id: string
      type: string
    }
    ArtistsRelationship: {
      data: components['schemas']['ArtistRelationship'][]
    }
    TrackRelationships: {
      artists: components['schemas']['ArtistsRelationship']
    }
    TrackListItemOutput: {
      id: string
      /** @example tracks */
      type: string
      attributes: components['schemas']['TrackListItemOutputAttributes']
      relationships: components['schemas']['TrackRelationships']
    }
    JsonApiMetaWithPagingAndCursor: {
      page: number
      pageSize: number
      totalCount: number | null
      pagesCount: number | null
      nextCursor: string | null
    }
    OmitTypeClass: {
      name: string
    }
    IncludedArtistOutput: {
      id: string
      type: string
      attributes: components['schemas']['OmitTypeClass']
    }
    GetTrackListOutput: {
      data: components['schemas']['TrackListItemOutput'][]
      meta: components['schemas']['JsonApiMetaWithPagingAndCursor']
      included: components['schemas']['IncludedArtistOutput'][]
    }
    PlaylistTrackAttributes: {
      title: string
      order: number
      addedAt: string
      updatedAt: string
      attachments: unknown[][]
      images: components['schemas']['GetImagesOutput']
      /**
       * @description 0 (не залогинен или не реагировал), 1 — лайк, -1 — дизлайк
       * @enum {number}
       */
      currentUserReaction: 0 | 1 | -1
    }
    GetPlaylistTrackListOutputData: {
      id: string
      /** @example tracks */
      type: string
      attributes: components['schemas']['PlaylistTrackAttributes']
      relationships: components['schemas']['TrackRelationships']
    }
    JsonApiMeta: {
      totalCount: number
    }
    GetPlaylistTrackListOutput: {
      data: components['schemas']['GetPlaylistTrackListOutputData'][]
      meta: components['schemas']['JsonApiMeta']
      included: components['schemas']['IncludedArtistOutput'][]
    }
    GetTagOutput: {
      id: string
      name: string
    }
    GetArtistOutput: {
      id: string
      name: string
    }
    TrackDetailsAttributes: {
      title: string
      lyrics?: string
      releaseDate?: string
      addedAt: string
      /** Format: iso8601 */
      updatedAt: string
      duration: number
      likesCount: number
      dislikesCount: number
      attachments: components['schemas']['AttachmentDto'][]
      images: components['schemas']['GetImagesOutput']
      tags: components['schemas']['GetTagOutput'][]
      artists: components['schemas']['GetArtistOutput'][]
      isPublished: boolean
      publishedAt?: string
      /**
       * @description 0 – гость или не реагировал, 1 – пользователь лайкнул, -1 – пользователь дизлайкнул
       * @enum {number}
       */
      currentUserReaction: 0 | 1 | -1
    }
    TrackDetailsData: {
      id: string
      /** @example tracks */
      type: string
      attributes: components['schemas']['TrackDetailsAttributes']
    }
    GetTrackDetailsOutput: {
      data: components['schemas']['TrackDetailsData']
    }
    ReactionOutput: {
      objectId: string
      /** @enum {number} */
      value: 0 | 1 | -1
      likes: number
      dislikes: number
    }
    GetPlaylistsRequestPayload: {
      /**
       * @description Номер страницы для пагинации (начиная с 1)
       * @default 1
       */
      pageNumber: number
      /**
       * @description Размер страницы для пагинации (от 1 до 20)
       * @default 10
       */
      pageSize: number
      /** @description Строка для поиска по названию плейлиста */
      search?: string
      /**
       * @description Поле, по которому выполняется сортировка
       * @default publishedAt
       * @enum {string}
       */
      sortBy: 'publishedAt' | 'likesCount'
      /**
       * @description Направление сортировки (по возрастанию или убыванию)
       * @default desc
       * @enum {string}
       */
      sortDirection: 'asc' | 'desc'
      /** @description Фильтрация по ID тегов. Может быть передано несколько значений: tagsIds=tag1&tagsIds=tag2 */
      tagsIds?: string[]
      /** @description Фильтрация по ID пользователя (создателя плейлиста) */
      userId?: string
      /** @description Фильтрация по ID трека — только те плейлисты, в которых он содержится */
      trackId?: string
    }
    JsonApiMetaWithPaging: {
      totalCount: number
      page: number
      pageSize: number
      pagesCount: number
    }
    GetPlaylistsOutput: {
      data: components['schemas']['PlaylistListItemJsonApiData'][]
      meta: components['schemas']['JsonApiMetaWithPaging']
    }
    ReorderTracksRequestPayload: {
      /**
       * Format: uuid
       * @description ID трека, после которого нужно вставить текущий. null - разместить трек в начало списка.
       * @example a1b2c3d4-e5f6-7890-abcd-1234567890ef
       */
      putAfterItemId?: string | null
    }
    UpdateTrackRequestPayload: {
      title: string
      /** @description Текст песни (lyrics) */
      lyrics?: string
      /** Format: iso8601 */
      releaseDate?: string
      tagIds?: string[]
      artistsIds?: string[]
    }
    TrackOutputAttributes: {
      title: string
      lyrics?: string
      releaseDate?: string
      addedAt: string
      /** Format: iso8601 */
      updatedAt: string
      duration: number
      likesCount: number
      dislikesCount: number
      attachments: components['schemas']['AttachmentDto'][]
      images: components['schemas']['GetImagesOutput']
      tags: components['schemas']['GetTagOutput'][]
      artists: components['schemas']['GetArtistOutput'][]
      isPublished: boolean
      publishedAt?: string
      /**
       * @description 0 – гость или не реагировал, 1 – пользователь лайкнул, -1 – пользователь дизлайкнул
       * @enum {number}
       */
      currentUserReaction: 0 | 1 | -1
    }
    TrackOutput: {
      id: string
      /** @example tracks */
      type: string
      attributes: components['schemas']['TrackOutputAttributes']
    }
    GetTrackOutput: {
      data: components['schemas']['TrackOutput']
    }
    AddTrackToPlaylistRequestPayload: {
      /** @description ID of the track to add to the playlist */
      trackId: string
    }
    CreateArtistRequestPayload: {
      name: string
    }
    LoginRequestPayload: {
      /** @description Код, полученный от oauth-сервер после редиректа */
      code: string
      /**
       * @description Укажите тоже значение, что и во время первого запроса на oauth-сервер
       * @example http://localhost:3000/oauth2/callback
       */
      redirectUri: string
      /**
       * @description Срок жизни accessToken-а (по дефолту "3m"), Можно использовать значение в формате: be a string like "60s", "3m", "2h", "1d"
       * @example 3m
       */
      accessTokenTTL?: string
      /** @description Как долго будет жить refreshToken. Если true - 1 месяц, если false - 30 минут. Явно указанный accessTokenTTL не должен быть больше, чем время жизни refreshToken */
      rememberMe: boolean
    }
    RefreshOutput: {
      refreshToken: string
      accessToken: string
    }
    BadRequestException: Record<string, never>
    UnauthorizedException: Record<string, never>
    RefreshRequestPayload: {
      refreshToken: string
    }
    LogoutRequestPayload: {
      refreshToken: string
    }
    GetMeOutput: {
      userId: string
      login: string
    }
    CreateTagRequestPayload: {
      name: string
    }
    /**
     * Format: binary
     * @description Файл в multipart/form-data
     */
    BinaryFile: string
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type SchemaUserOutputDto = components['schemas']['UserOutputDTO']
export type SchemaImageDto = components['schemas']['ImageDto']
export type SchemaPlaylistImagesOutputDto = components['schemas']['PlaylistImagesOutputDTO']
export type SchemaReactionValue = components['schemas']['ReactionValue']
export type SchemaPlaylistAttributesDto = components['schemas']['PlaylistAttributesDto']
export type SchemaPlaylistListItemJsonApiData = components['schemas']['PlaylistListItemJsonApiData']
export type SchemaGetMyPlaylistsOutput = components['schemas']['GetMyPlaylistsOutput']
export type SchemaCreatePlaylistRequestPayload = components['schemas']['CreatePlaylistRequestPayload']
export type SchemaPlaylistOutputAttributes = components['schemas']['PlaylistOutputAttributes']
export type SchemaPlaylistOutput = components['schemas']['PlaylistOutput']
export type SchemaGetPlaylistOutput = components['schemas']['GetPlaylistOutput']
export type SchemaUpdatePlaylistRequestPayload = components['schemas']['UpdatePlaylistRequestPayload']
export type SchemaReorderPlaylistsRequestPayload = components['schemas']['ReorderPlaylistsRequestPayload']
export type SchemaGetImagesOutput = components['schemas']['GetImagesOutput']
export type SchemaGetTracksRequestPayload = components['schemas']['GetTracksRequestPayload']
export type SchemaAttachmentDto = components['schemas']['AttachmentDto']
export type SchemaTrackListItemOutputAttributes = components['schemas']['TrackListItemOutputAttributes']
export type SchemaArtistRelationship = components['schemas']['ArtistRelationship']
export type SchemaArtistsRelationship = components['schemas']['ArtistsRelationship']
export type SchemaTrackRelationships = components['schemas']['TrackRelationships']
export type SchemaTrackListItemOutput = components['schemas']['TrackListItemOutput']
export type SchemaJsonApiMetaWithPagingAndCursor = components['schemas']['JsonApiMetaWithPagingAndCursor']
export type SchemaOmitTypeClass = components['schemas']['OmitTypeClass']
export type SchemaIncludedArtistOutput = components['schemas']['IncludedArtistOutput']
export type SchemaGetTrackListOutput = components['schemas']['GetTrackListOutput']
export type SchemaPlaylistTrackAttributes = components['schemas']['PlaylistTrackAttributes']
export type SchemaGetPlaylistTrackListOutputData = components['schemas']['GetPlaylistTrackListOutputData']
export type SchemaJsonApiMeta = components['schemas']['JsonApiMeta']
export type SchemaGetPlaylistTrackListOutput = components['schemas']['GetPlaylistTrackListOutput']
export type SchemaGetTagOutput = components['schemas']['GetTagOutput']
export type SchemaGetArtistOutput = components['schemas']['GetArtistOutput']
export type SchemaTrackDetailsAttributes = components['schemas']['TrackDetailsAttributes']
export type SchemaTrackDetailsData = components['schemas']['TrackDetailsData']
export type SchemaGetTrackDetailsOutput = components['schemas']['GetTrackDetailsOutput']
export type SchemaReactionOutput = components['schemas']['ReactionOutput']
export type SchemaGetPlaylistsRequestPayload = components['schemas']['GetPlaylistsRequestPayload']
export type SchemaJsonApiMetaWithPaging = components['schemas']['JsonApiMetaWithPaging']
export type SchemaGetPlaylistsOutput = components['schemas']['GetPlaylistsOutput']
export type SchemaReorderTracksRequestPayload = components['schemas']['ReorderTracksRequestPayload']
export type SchemaUpdateTrackRequestPayload = components['schemas']['UpdateTrackRequestPayload']
export type SchemaTrackOutputAttributes = components['schemas']['TrackOutputAttributes']
export type SchemaTrackOutput = components['schemas']['TrackOutput']
export type SchemaGetTrackOutput = components['schemas']['GetTrackOutput']
export type SchemaAddTrackToPlaylistRequestPayload = components['schemas']['AddTrackToPlaylistRequestPayload']
export type SchemaCreateArtistRequestPayload = components['schemas']['CreateArtistRequestPayload']
export type SchemaLoginRequestPayload = components['schemas']['LoginRequestPayload']
export type SchemaRefreshOutput = components['schemas']['RefreshOutput']
export type SchemaBadRequestException = components['schemas']['BadRequestException']
export type SchemaUnauthorizedException = components['schemas']['UnauthorizedException']
export type SchemaRefreshRequestPayload = components['schemas']['RefreshRequestPayload']
export type SchemaLogoutRequestPayload = components['schemas']['LogoutRequestPayload']
export type SchemaGetMeOutput = components['schemas']['GetMeOutput']
export type SchemaCreateTagRequestPayload = components['schemas']['CreateTagRequestPayload']
export type SchemaBinaryFile = components['schemas']['BinaryFile']
export type $defs = Record<string, never>
export interface operations {
  PlaylistsController_getMyPlaylists: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: Список плейлистов успешно получен */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetMyPlaylistsOutput']
        }
      }
      /** @description Unauthorized: Пользователь не авторизован */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  PlaylistsPublicController_getPlaylists: {
    parameters: {
      query?: {
        /** @description Номер страницы для пагинации (начиная с 1) */
        pageNumber?: number
        /** @description Размер страницы для пагинации (от 1 до 20) */
        pageSize?: number
        /** @description Строка для поиска по названию плейлиста */
        search?: string
        /** @description Поле, по которому выполняется сортировка */
        sortBy?: 'publishedAt' | 'likesCount'
        /** @description Направление сортировки (по возрастанию или убыванию) */
        sortDirection?: 'asc' | 'desc'
        /** @description Фильтрация по ID тегов. Может быть передано несколько значений: tagsIds=tag1&tagsIds=tag2 */
        tagsIds?: string[]
        /** @description Фильтрация по ID пользователя (создателя плейлиста) */
        userId?: string
        /** @description Фильтрация по ID трека — только те плейлисты, в которых он содержится */
        trackId?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: JSON:API список плейлистов с пагинацией */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetPlaylistsOutput']
        }
      }
    }
  }
  PlaylistsController_createPlaylist: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePlaylistRequestPayload']
      }
    }
    responses: {
      /** @description Created: Плейлист успешно создан */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetPlaylistOutput']
        }
      }
      /** @description Forbidden: Превышен лимит создания плейлистов */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  PlaylistsPublicController_getPlaylistById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description ID плейлиста */
        playlistId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: Плейлист успешно найден */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetPlaylistOutput']
        }
      }
      /** @description NotFound: Плейлист с таким ID не найден */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  PlaylistsController_updatePlaylist: {
    parameters: {
      query?: never
      header?: never
      path: {
        playlistId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePlaylistRequestPayload']
      }
    }
    responses: {
      /** @description NoContent: Плейлист успешно обновлён */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description BadRequest: Ошибка валидации, например, превышено количество тегов (более 5) */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Пользователь не имеет прав для обновления данного плейлиста */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  PlaylistsController_deletePlaylist: {
    parameters: {
      query?: never
      header?: never
      path: {
        playlistId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description NoContent: Плейлист успешно удалён */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Недостаточно прав для удаления плейлиста */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description NotFound: Плейлист не найден */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  PlaylistsController_reorderPlaylist: {
    parameters: {
      query?: never
      header?: never
      path: {
        playlistId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReorderPlaylistsRequestPayload']
      }
    }
    responses: {
      /** @description NoContent: Порядок плейлистов успешно изменён */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Playlist not found или putAfterItemId not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  PlaylistsController_uploadMainImage: {
    parameters: {
      query?: never
      header?: never
      path: {
        playlistId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'multipart/form-data': {
          /** @description Максимальный размер 1 MB, Минимальная высота — 500px, квадратное изображение */
          file: components['schemas']['BinaryFile']
        }
      }
    }
    responses: {
      /** @description OK: Обложка успешно загружена */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetImagesOutput']
        }
      }
      /** @description BadRequest: Ошибка формата или размеров изображения */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Нет прав на загрузку изображения в плейлист */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  PlaylistsController_deleteTrackCover: {
    parameters: {
      query?: never
      header?: never
      path: {
        playlistId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description NoContent: Обложка удалена */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Удаление обложки плейлиста другого пользователя запрещена */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description NotFound: Плейлист не найден */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TracksPublicController_getAllTracks: {
    parameters: {
      query?: {
        /** @description Номер страницы для пагинации (начиная с 1) */
        pageNumber?: number
        /** @description Размер страницы для пагинации (от 1 до 20) */
        pageSize?: number
        /** @description Строка для поиска по названию плейлиста */
        search?: string
        /** @description Поле, по которому сортируются треки */
        sortBy?: 'publishedAt' | 'likesCount'
        /** @description Направление сортировки (по возрастанию или убыванию) */
        sortDirection?: 'asc' | 'desc'
        /** @description Фильтрация по ID тегов (можно передавать несколько) */
        tagsIds?: string[]
        /** @description Фильтрация по ID артистов (можно передавать несколько) */
        artistsIds?: string[]
        /** @description Фильтрация по ID пользователя (создателя трека) */
        userId?: string
        /** @description Если true — включать в выдачу также ваши неопубликованные треки (drafts) */
        includeOwnUnpublished?: boolean
        /** @description Тип пагинации: `offset` — по номеру страницы; `cursor` — keyset/seek. */
        paginationType?: 'offset' | 'cursor'
        /** @description Base64-закодированный курсор для keyset-пагинации. Используется только если paginationType=cursor. */
        cursor?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: Пагинированный список треков */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetTrackListOutput']
        }
      }
    }
  }
  TracksPublicController_getPlaylistTracks: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description ID плейлиста, для которого необходимо получить треки */
        playlistId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: Список треков в плейлисте */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetPlaylistTrackListOutput']
        }
      }
      /** @description NotFound: Плейлист с указанным ID не найден */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TracksPublicController_getTrackDetails: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description ID трека, для которого необходимо получить детали */
        trackId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: Детали трека с вложениями */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetTrackDetailsOutput']
        }
      }
      /** @description NotFound: Трек с таким ID не найден */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TracksController_updateTrack: {
    parameters: {
      query?: never
      header?: never
      path: {
        trackId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateTrackRequestPayload']
      }
    }
    responses: {
      /** @description OK: Трек успешно обновлён */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetTrackOutput']
        }
      }
      /** @description BadRequest: Превышено количество тегов или артистов */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Нельзя редактировать чужой трек */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description NotFound: Трек или плейлист не найден */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TracksController_deleteTrackCompletely: {
    parameters: {
      query?: never
      header?: never
      path: {
        trackId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description NoContent: Трек полностью удалён */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Удаление чужого трека запрещено */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description NotFound: Трек не найден */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TracksPublicController_likeTrack: {
    parameters: {
      query?: never
      header?: never
      path: {
        trackId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: Текущая реакция пользователя + суммарные счётчики */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReactionOutput']
        }
      }
      /** @description BadRequest: Некорректный идентификатор */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized: Пользователь не авторизован */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description NotFound: Трек не найден */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TracksPublicController_dislikeTrack: {
    parameters: {
      query?: never
      header?: never
      path: {
        trackId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReactionOutput']
        }
      }
      /** @description BadRequest: Некорректный ID */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description NotFound: Трек не найден */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TracksPublicController_removeTrackReaction: {
    parameters: {
      query?: never
      header?: never
      path: {
        trackId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReactionOutput']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  PlaylistsPublicController_likePlaylist: {
    parameters: {
      query?: never
      header?: never
      path: {
        playlistId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReactionOutput']
        }
      }
      /** @description BadRequest: Некорректный ID */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description NotFound: Плейлист не найден */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  PlaylistsPublicController_dislikePlaylist: {
    parameters: {
      query?: never
      header?: never
      path: {
        playlistId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReactionOutput']
        }
      }
      /** @description BadRequest: Некорректный ID */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description NotFound: Плейлист не найден */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  PlaylistsPublicController_removePlaylistReaction: {
    parameters: {
      query?: never
      header?: never
      path: {
        playlistId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReactionOutput']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description NotFound: Плейлист не найден */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TracksController_reorderTrack: {
    parameters: {
      query?: never
      header?: never
      path: {
        playlistId: string
        trackId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReorderTracksRequestPayload']
      }
    }
    responses: {
      /** @description OK: Порядок трека обновлён */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description BadRequest: Нельзя поставить после самого себя */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Нет доступа к плейлисту */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description NotFound: Трек или putAfterItemId не найден */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TracksController_addTrackToPlaylist: {
    parameters: {
      query?: never
      header?: never
      path: {
        playlistId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AddTrackToPlaylistRequestPayload']
      }
    }
    responses: {
      /** @description NoContent: Трек успешно добавлен в плейлист */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Нет доступа к плейлисту или превышен лимит треков в плейлисте: максимум 10 треков */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description NotFound: Плейлист не найден */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TracksController_unbindTrackFromPlaylist: {
    parameters: {
      query?: never
      header?: never
      path: {
        playlistId: string
        trackId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description NoContent: Трек удалён из плейлиста */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Нет доступа к плейлисту */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description NotFound: Плейлист не найден */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TracksController_publishTrack: {
    parameters: {
      query?: never
      header?: never
      path: {
        trackId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content: Трек успешно опубликован */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Нельзя публиковать чужие треки */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Not Found: Трек с указанным ID не найден */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict: Трек уже опубликован */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TracksController_uploadTrackCover: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description ID трека, которому загружается обложка */
        trackId: string
      }
      cookie?: never
    }
    /** @description Файл изображения.<br/>
     *                       • Имя поля — <code>cover</code><br/>
     *                       • Допустимые MIME-типы — <code>image/jpeg</code>, <code>image/png</code>, <code>image/gif</code><br/>
     *                       • Максимальный размер — <code>100 KB</code> */
    requestBody: {
      content: {
        'multipart/form-data': {
          /** Format: binary */
          cover: string
        }
      }
    }
    responses: {
      /** @description OK: Успешная загрузка обложки */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetImagesOutput']
        }
      }
      /** @description BadRequest: Неверный файл или превышен размер */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Нельзя загружать обложку к чужому треку */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description NotFound: Трек не найден */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TracksController_deleteTrackCover: {
    parameters: {
      query?: never
      header?: never
      path: {
        trackId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description NoContent: Обложка удалена */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Удаление обложки трека другого пользователя запрещена */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description NotFound: Трек не найден */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TracksController_uploadTrackMp3: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'multipart/form-data': {
          /** @example My cool track */
          title: string
          /** Format: binary */
          file: string
        }
      }
    }
    responses: {
      /** @description OK: Трек успешно создан */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetTrackOutput']
        }
      }
      /** @description BadRequest: Неверный формат файла или превышен размер */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description InternalServerError: Ошибка при сохранении файла или трека */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ArtistsController_createArtist: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateArtistRequestPayload']
      }
    }
    responses: {
      /** @description Created: Исполнитель успешно создан */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetArtistOutput']
        }
      }
      /** @description BadRequest: Ошибка валидации или неверный ввод */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized: Пользователь не авторизован */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Лимит в 100 артистов на пользователя исчерпан */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict: Исполнитель с таким именем уже существует */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ArtistsController_searchArtist: {
    parameters: {
      query: {
        search: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: Список исполнителей найден по подстроке */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetArtistOutput'][]
        }
      }
    }
  }
  ArtistsController_deleteArtist: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description NoContent: Исполнитель успешно удалён */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Другой юзер создал данного артиста или данный артист прикреплён к трекам */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description NotFound: Исполнитель с таким ID не найден */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AuthController_OauthRedirect: {
    parameters: {
      query?: {
        /** @description The callback URL to redirect after grand access,
         *          https://oauth.apihub.it-incubator.io/realms/apihub/protocol/openid-connect/auth?client_id=spotifun&response_type=code&redirect_uri=http://localhost:3000/oauth2/callback&scope=openid */
        callbackUrl?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: Редирект выполнен */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AuthController_login: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['LoginRequestPayload']
      }
    }
    responses: {
      /** @description OK: Успешно получена пара токенов */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RefreshOutput']
        }
      }
      /** @description BadRequest: Неверный формат запроса или отсутствуют обязательные параметры */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BadRequestException']
        }
      }
      /** @description Unauthorized: Код недействителен, истёк или не передан, или не совпадает redirectUri */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UnauthorizedException']
        }
      }
    }
  }
  AuthController_refresh: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RefreshRequestPayload']
      }
    }
    responses: {
      /** @description OK: Успешное обновление пары токенов */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RefreshOutput']
        }
      }
      /** @description Unauthorized: Refresh-token недействителен, истёк или не передан */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UnauthorizedException']
        }
      }
    }
  }
  AuthController_logout: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['LogoutRequestPayload']
      }
    }
    responses: {
      /** @description OK: refresh токен деактивирован, при этом access-токен остаётся ещё валидным. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AuthController_getMe: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: Успешное получение информации о пользователе */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetMeOutput']
        }
      }
      /** @description Unauthorized: access токен отсутствует или недействителен */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TagsController_createTag: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateTagRequestPayload']
      }
    }
    responses: {
      /** @description Created: Тег успешно создан */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetTagOutput']
        }
      }
      /** @description BadRequest: Ошибка валидации */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized: Пользователь не авторизован */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Лимит в 100 тегов на пользователя исчерпан */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Conflict: Тег с таким именем уже существует */
      409: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TagsController_searchTags: {
    parameters: {
      query: {
        /** @description Подстрока для поиска тегов (по нормализованному имени) */
        search: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK: Список подходящих тегов */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetTagOutput'][]
        }
      }
      /** @description BadRequest: Некорректный поисковый запрос */
      400: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TagsController_deleteTag: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description ID удаляемого тега */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description NoContent: Тег успешно удалён */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized: Пользователь не авторизован */
      401: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden: Другой юзер создал данный тег или данй тег прикреплён к трекам и плейлистам */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description NotFound: Тег с указанным ID не найден */
      404: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
}
